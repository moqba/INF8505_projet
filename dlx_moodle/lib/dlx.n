/*
-- File : dlx.n
--
-- Contents : nML model for the DLX processor.
--
-- Copyright (c) 2014-2021 Synopsys, Inc. This Synopsys processor model
-- captures an ASIP Designer Design Technique. The model and all associated
-- documentation are proprietary to Synopsys, Inc. and may only be used
-- pursuant to the terms and conditions of a written license agreement with
-- Synopsys, Inc.  All other use, reproduction, modification, or distribution
-- of the Synopsys processor model or the associated  documentation is
-- strictly prohibited.
*/

#include "dlx_define.h"


enum stage_names {
  PF,   // Pre-fetch
  IF,   // Instruction Fetch
  ID,   // Instruction Decode,   read registers
  EX,   // EXecute
  ME,   // MEmory
  WB    // Write Back registers
};

// memories

def pm_size=2**PM_SIZE_NBIT;
mem PMb[pm_size,1] <w08,addr>;

mem PM[pm_size,4] <iword,addr> alias PMb access {
   pm_ld`PF` : pm_rd `IF` = PM[pm_ad`PF`] `IF`;
   pm_st     : PM[pm_ad]  = pm_wr;
};

property unconnected : PM; // PMb has property program_memory, but PM is accessed by PCU

def dm_size=2**DM_SIZE_NBIT;
mem DMb [dm_size,1]<w08,addr> access {
    dmb_ld`EX`: dmb_rd `ME` = DMb[dm_ad `EX`] `ME`;
    dmb_st`EX`: DMb[dm_ad `EX`] `ME` = dmb_wr `EX`;
};

mem DMh [dm_size,2]<w16,addr> alias DMb access {
    dmh_ld`EX`: dmh_rd `ME` = DMh[dm_ad `EX`] `ME`;
    dmh_st`EX`: DMh[dm_ad `EX`] `ME` = dmh_wr `EX`;
};

mem DMw [dm_size,4]<w32,addr> alias DMb access {
    dmw_ld`EX`: dmw_rd `ME` = DMw[dm_ad `EX`] `ME`;
    dmw_st`EX`: DMw[dm_ad `EX`] `ME` = dmw_wr `EX`;
};

// subrange used to store static data with efficient 15 bit direct addressing.

mem DMb_stat [2**15,1]<w08,addr> alias DMb[0] access {};
mem DMh_stat [2**15,2]<w16,addr> alias DMb_stat access {};
mem DMw_stat [2**15,4]<w32,addr> alias DMb_stat access {};
property unconnected : DMb_stat, DMh_stat, DMw_stat;

// registers
reg R[32]<w32,uint5> syntax ("R") read(r_r1 r_r2) write(r_w1 r_w2);


reg SP <w32> alias R[1]  read(r_r1) write(r_w1);     // stack pointer
reg LR <w32> alias R[15] read(r_r1) write(r_w1);     // link register

reg PL <w32> alias R[12] read(r_r1) write(r_w1 wl);  // low product
reg PH <w32> alias R[13] read(r_r2) write(r_w2 wh);  // high product

reg PC <w32> read(pcr) write(pcw);                   // program counter

reg MC <uint1>;                                      // MSB/Carry bit


reg IE<uint1> read(ier)  write(iew);                 // interrupt enable flag
hw_init IE = 0;
reg SRdummy<uint14>;                                 // unused status bits
reg IM<uint16> read(imr) write (imw);                // interrupt mask
reg SR<w32> { IM; IE; MC; SRdummy; };

reg ILR<w32>;
reg ISR<w32>;

inport  ireq_pcu_inp<uint16>;                        // from interrupt io_interface to PCU
outport iack_pcu_out<uint16>;                        // from PCU to interrupt io_interface
outport halted_out<uint1>;

// pipeline registers
pipe pidR1 <w32>;                                    // source 1 (ID->EX)
pipe pidR2 <w32>;                                    // source 2 (ID->EX)
pipe pexR1 <w32>;                                    // destination 1 (EX->ME)
pipe pmeR1 <w32>;                                    // destination 1 (ME->WR)

pipe pexR2 <w32>;                                    // destination 2 (EX->ME)
pipe pmeR2 <w32>;                                    // destination 2 (ME->WR)

trn texR1<w32>;                                      // input of pexR1, is used in bypass rules
trn tmeR1<w32>;                                      // input of pmeR1, is used in bypass rules

trn texR2<w32>;                                      // input of pexR2, is used in bypass rules
trn tmeR2<w32>;                                      // input of pmeR2, is used in bypass rules

reg LF        <uint2> read(lfr lfra) write(lfw);     // loop flag
reg LS[2]<addr,uint2> read(lsr) write(lsw);          // loop start address
reg LE[2]<addr,uint2> read(ler) write(lew);          // loop end address
reg LC[2]<w32 ,uint2> read(lcr) write(lcw);          // loop count
property unconnected : LF, LS, LE, LC;
hw_init LF = 3;                                      // no hardware loops active

// zloop registers

reg ZC <w32>  read(zcr) write(zcw);                  // loop count
#ifndef __programmers_view__
reg ZD <w32>  read(zdr) write(zcw);                  // loop count shadow (zloop_count_invariant), shared write trn
#endif
reg ZS <addr> read(zsr) write(zsw);                  // loop start address
reg ZE <addr> read(zer) write(zew);                  // loop end address
property unconnected : ZC, ZS, ZE;
hw_init ZE = 0xfffffff;

// constants
cst c5s   <int5>;
cst c16s  <int16>;
cst c26s  <int26>;

cst c4u   <uint4>;
cst c5u   <uint5>;
cst c7u   <uint7>;
cst c10u  <uint10>;
cst c16u  <uint16>;

cst c16p  <int16p>;


// properties

properties {
    program_counter : PC;
    program_memory  : PMb;
    endianness      : little;
    decode_stage    : ID;
    unconnected     : SP;
    chess_pc_offset : instructions;
}

// start of instruction set grammar

start dlx;

opn dlx ( alu_instr
        | load_store_instr
        | control_instr
        | div_instr
        );

#if defined(__go__)
opn always (ocd: ocd_if) { action { ocd; } }
#endif


#include "opcode.n"
#include "regfile.n"
#include "alu.n"
#include "ldst.n"
#include "control.n"
#include "div.n"
#include "ocd_if.n"
#include "hazards.n"


