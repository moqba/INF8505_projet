/*
-- Copyright (c) 2021 Synopsys, Inc. This Synopsys processor model
-- captures an ASIP Designer Design Technique. The model and all associated
-- documentation are proprietary to Synopsys, Inc. and may only be used
-- pursuant to the terms and conditions of a written license agreement with
-- Synopsys, Inc.  All other use, reproduction, modification, or distribution
-- of the Synopsys processor model or the associated  documentation is
-- strictly prohibited.
*/
#ifndef INCLUDED_GO_OPTIONS_SYNA_CFG__
#define INCLUDED_GO_OPTIONS_SYNA_CFG__

#include "go_options-common.cfg"
#include "go_options-sim.cfg"

//-----------------------------------------------------
// Explicit per-field write-enable. Needed to remove dead X[0]

register_write_per_field : reg_X;

//------------------------------------------------------------------------------
// Prefer registered inputs for pipelined units

multi_stage_pipes_at_input;

//------------------------------------------------------------------------------
// Generate write-enable for register files to allow clock gating during synthesis

register_vector_write_enable;

//------------------------------------------------------------------------------
// On stall only remove write enables, do not zero opcodes for operations in
// ID stage (which is the default). The PCU code assumes this mode.

direct_write_disable_on_stall : 1;

//------------------------------------------------------------------------------
// Inline PDG-generated code into functional units

pdg_inline;

//------------------------------------------------------------------------------
// avoid write-enable for always-written local registers

pdg_register_write_enable : 2;

//------------------------------------------------------------------------------
// for guarded operations (e.g. OCD interface, or div MCFU), select first
// operation as default. For muxes, this avoid '0' as extra input operand

remove_guards_from_first_default_opn;

//------------------------------------------------------------------------------
// Register addresses are aligned in RISC-V ISA encoding - use instruction
// registers directly (e.g. operand 1 read address is always encoded in
// instruction bits 19..15 in all instructions.

register_addresses_from_decoder : 0;
merge_register_addresses : 3;

//------------------------------------------------------------------------------
// Expand trivial guarded mux'es

expand_trivial_multiplexers : 2;

//------------------------------------------------------------------------------
// Tune hazards decoder module

hold_opcodes_on_stall : hazards;
unconditional_hazard_address_comparison;

//------------------------------------------------------------------------------
// let synthesis ungroup some units in critical paths

#ifndef SYNTHESIS_NO_UNGROUP
embedded_dc_tcl
    dm_merge mem_DMb lx // DM
    mem_PMb pm          // PM
    "mux*"              // all mux'es
  : "set_ungroup [current_design]";
#endif

//------------------------------------------------------------------------------
// On Chip Debugging

// 2 reset ports: 1) core "reset" and 2) processor debug controller "reset_pdc"
// PDC requests core reset via output port (dbg_reset_out)
// External circuit should combine external core reset and PDC core-reset request
ocd_internal_reset : 0;
ocd_external_reset_name : reset_pdc;

//------------------------------------------------------------------------------
// Select default operation/mux input/...

default_in_case_statement : 2;
default_primitive_operations;
default_multiplexer_operations;
default_memory_operations;
default_immediate_constants : mux_aguB mux_dm_addr mux_pcaB;

//------------------------------------------------------------------------------
// Reduce opcode toggling

extra_enable_bit;
split_opcode_registers;

//------------------------------------------------------------------------------
// Add write-enable to decoder internal registers

instruction_pipe_write_enable : 2;

//------------------------------------------------------------------------------
// Add write-enable to all pipeline registers
//  - for nML 'pipe' and for multistage (pipelined) primitives

pipe_write_enable : 2;

//------------------------------------------------------------------------------
// Fine-tune register write-enable & next-value comb. processes for simple cases

register_write_enable_optimise : 3;

#endif // INCLUDED_GO_OPTIONS_SYNA_CFG__
