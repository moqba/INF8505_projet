TRV32P5 HDL Projects
--------------------

``trv32p5_vlog.prx``

  Default Verilog HDL model. For simulation and synthesis. HDL coverage
  collection is enabled by default: line, condition and branch coverage.


``trv32p5_vhdl.prx``

  Default VHDL model. For simulation and synthesis.


``trv32p5_vlog-isacov.prx``

  SystemVerilog model with Coverpoints to collect ISA coverage data.


``trv32p5_vlog-hwswdbg.prx``

  Verilog model to be used with Verdi HW SW Debug solution.


``trv32p5_vlog-c1.prx``

  Enables some recommended Go options for optimized synthesis results. For best
  results, the Go configuration should be evaluated for the user PPA target
  and application context.


Configuration Files
-------------------

``go_options.cfg``

  Default Go options files, for synthesis, simulation etc.


``go_options-common.cfg``

  Common options for HDL model generation.


``go_options-sim.cfg``

  HDL simulation specific options - enables RTL coverage collection and
  X propagation.


``go_options-isacov.cfg``

  Additional options for ISA coverage collection.


``go_options-hwswdbg.cfg``

  Additional options for HW SW debug. Note that ``register_write_per_field``
  cannot be enabled. It is incompatible with the HW SW debug interface.


``go_options-c1.cfg``

  Additional recommended options for improved PPA.


HW SW Debug
-----------

Please read the chapter 'Hardware-Software Debug' in the Go manual first. Here
are the steps for the Trv32p5 model.

First, prepare the ``sort`` example. The preprocessor define disables hosted
IO (printf...) in the ``sort`` application. This is a feature of the ``sort``
demo application.

  .. code-block:: bash

      # Compile
      chessmk examples/sort/sort -DNO_HOSTEDIO

      # Simulate to get cycle count file
      chessmk examples/sort/sort -DNO_HOSTEDIO +C rcd -S


Now setup the HW SW debug solution. Notice that non-default HDL (Makefile)
targets are used here (option -hdl-starget): chessmk internally uses the
Makefile generated by Go. Option -hdl-target selects a Makefile target.

  .. code-block:: bash

      # Generate HDL model
      chessmk hdl/trv32p5_vlog-hwswdbg.prx

      # Elaborate HDL model
      chessmk hdl/trv32p5_vlog-hwswdbg.prx +e -hdl-target elab_hwsw

      # Launch simulation
      chessmk examples/sort/sort -DNO_HOSTEDIO +E trv32p5_vlog-hwswdbg -H -hdl-target hwsw_debug


Gate-Level Synthesis
--------------------

ASIP Designer can generate scripts for Synopsys Fusion Compiler, Synopsys
RTL Architect and Synopsys Design Compiler. By default, for Trv32p5, all three
scripts are generated (see go_options-common.cfg). The scripts are based on the
Reference Methodology script flow available on SolvNetPlus for the three tools.

There are few ASIP specific extensions to provide a convenient out-of-the-box
first-use experience, e.g. for quick exploration (synthesis in the loop). The
user is expected to further customize as needed. Please refer to the manuals for
more details.

This example uses the SAED32 library. The manuals contain download instructions.
The environment variable ``SAED32_HOME`` should point to the SAED32 library
installation path.

Here is an example for Fusion Compiler:

  .. code-block:: bash

      # Generate HDL model
      chessmk hdl/trv32p5_vlog.prx

      # Go to Fusion Compiler script root
      cd hdl/trv32p5_vlog/syn_fc

      # Run gate-level synthesis
      make synthesis_only

      # alternative: full RTL-to-GDSII flow
      # make

After successful excecution, inspect the reports in ``syn_fc/rpts_fc/compile/``.

  * ``compile.report_qor``: summarizes WNS and achieved frequencies.

  * ``compile.report_area_hierarchy``: area report

  * ``compile.analyze_design_violations.setup.txt``: analysis of timing
    violations


