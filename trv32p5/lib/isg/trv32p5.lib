
// File generated by noodle version Q-2020.03#7e5ed72dc8#200717, Sun Mar 26 18:38:14 2023
// Copyright 2014-2020 Synopsys, Inc. All rights reserved.
// noodle -pc -Iisg +wisg -D__tct_patch__=300 -Wall +NOrlt -D__chess__ -D__programmers_view__ trv32p5

toolrelease _20R1;

//-- CHESS GENERIC TYPES AND PRIMITIVES --

typ any<0>;
typ void<0>;
prim typ bool<1u>[0,1,1];

// general properties:

add_sub_inv {
}
chess_view {
}
chess_view_opn {
}
commutative {
}
conversion {
}
dont_disable_chess_view {
}
envelope {
}
envelope_open : envelope {
}
envelope_close : envelope {
}
isr_envelope_open : envelope_open {
}
isr_envelope_close : envelope_close {
}
event_opn {
}
early_clobbers {
}
expensive {
}
explicit {
}
immediate_repeat_count {
}
inlined {
}
isolate_status_uses {
}
multicycle {
}
no_duplicate_move {
}
no_pdg_definition {
}
primitive {
}
promoted {
}
promotion_conversion {
}
unfoldable {
}
broadcast : unfoldable {
}
element_wise : unfoldable {
}
right_padding : unfoldable {
}
right_truncate : unfoldable {
}
unused {
}
user_defined {
}
volatile {
}

assembly : event_opn {
}
called : event_opn {
}
chess_hosted : called {
}
chess_assert : chess_hosted, volatile {
}
chess_report : chess_hosted, volatile {
}
chess_stop : chess_hosted, volatile {
}
chess_cycle_count : chess_hosted {
}
chess_exit : chess_hosted, volatile {
}
chess_hosted_io : chess_hosted, volatile {
}
chess_separator : called {
}
chess_separator_scheduler : chess_separator {
}
chess_instruction_tracing_begin : chess_separator_scheduler {
}
chess_instruction_tracing_end : chess_separator_scheduler {
}
chess_profile_begin : chess_separator_scheduler {
}
chess_profile_end : chess_separator_scheduler {
}
chess_seqloop_test : chess_separator_scheduler {
}
chess_seqloop_end : chess_separator_scheduler {
}
chess_tcl_break : chess_separator_scheduler {
}
isr : event_opn {
}

nop : volatile {
}
never_returns : volatile {
}

instruction_properties {
}
instruction_class : instruction_properties {
}
cycles : instruction_properties {
}
words : instruction_properties {
}
alt_cycles : instruction_properties {
}
delay_slots : instruction_properties {
}
pc_offset : instruction_properties {
}

// SFG annotations:

chess_frequent_else : event_opn {
}
chess_frequent_then : event_opn {
}
chess_rear_then : event_opn {
}
chess_no_warn_pipelining : event_opn {
}
chess_modulo_scheduling_budget_ratio : event_opn {
    arg : ( any:i );
}
chess_pipeline_adjust_preamble : event_opn {
    arg : ( any:i );
}
chess_pipeline_initiation_interval : event_opn {
    arg : ( any:i );
}
chess_pipeline_non_leaf_loop_solution : event_opn {
    arg : ( any:i );
}
chess_peel_pipelined_loop : event_opn {
    arg : ( any:i );
}
chess_require_postamble : event_opn {
}

// source/sink operations:

inp : event_opn {
    arg : ( any:o );
}
out : event_opn {
    arg : ( any:i );
}
tr_inp : event_opn {
    arg : ( any:o );
}
tr_out : event_opn {
    arg : ( any:i );
}

st_def : event_opn {
    arg : ( any:o );
}
source : event_opn {
    arg : ( any:o );
}
sink : event_opn {
    arg : ( any:i );
}
sync_sink : sink {
}
to_route_sink : sink {
}
seqif_sink : event_opn {
    arg : ( any:i );
}

const : event_opn {
    arg : ( any:o );
}
const_inp : event_opn {
    arg : ( any:o );
}

undefined : event_opn {
    arg : ( any:o );
}
never : undefined {
}

chain_tie : event_opn {
}

keep_dead : event_opn {
    arg : ( any:i );
}

// flow operations:

flow_opn : event_opn {
}
fork : flow_opn {
    arg : ( any:o any:o any:i );
}
join : flow_opn {
    arg : ( any:o any:i any:i );
}

branch : fork {
}
merge : join {
}
gmerge : join {
}

entry : join {
}
exit : fork {
}

call_link : flow_opn {
    arg : ( any:o any:i );
}
// irremovable call link:
defval_call_link : event_opn {
    arg : ( any:o any:i );
}

sync_link : flow_opn {
    arg : ( any:o any:i );
}
sync_never : flow_opn {
    arg : ( any:o any:i );
}
// var assignment in C:
assign : event_opn {
    arg : ( any:r any:i );
}
deassign : assign {
}
direct_assign : assign {
}
strict_assign : assign {
}
// conversion without move:
in_situ_conv : event_opn {
    arg : ( any:r any:i );
}
// trn assignment in nML:
copy {
    arg : ( any:r any:i );
}
excl_in_move {
}

// heading operations:

heading : event_opn {
    arg : ( any:i );
}
if_expr : heading {
}
else_expr : event_opn {
    arg : ( any:i );
}
while_expr : heading {
}
for_count : heading {
}

// control operations:

cntrl {
}
absolute {
}
relative {
}
seqelsif {
}

call : cntrl {
}
near_call : cntrl {
}
doloop : cntrl {
}
doloop_no_cntrl : cntrl {
}
repeat : cntrl {
}
halt : cntrl, volatile {
}
jump : cntrl {
}
jti : jump {
}
ret : cntrl {
}
near_ret : cntrl {
}
rti : ret {
}
zloop_sink : event_opn {
    arg : ( any:i any:i any:i );
}
zloop_sink_absolute : zloop_sink, absolute {
}
zloop_sink_relative : zloop_sink, relative {
}

multi_register_pop {
}
multi_register_push {
}

// storage operations:

storage_opn {
}
l_storage_opn : storage_opn {
}
s_storage_opn : storage_opn {
}

a_fetch : l_storage_opn {
    arg : ( any:r any:i any:i );
}
a_update : s_storage_opn {
    arg : ( any:o any:i any:i );
}

load : a_fetch {
}
store : a_update {
}

read_file : a_fetch {
}
write_file : a_update {
}

read_reg : l_storage_opn {
    arg : ( any:r any:i );
}
write_reg : s_storage_opn {
    arg : ( any:r any:i );
}

// alternate storage operations:

alt_load {
}
alt_store {
}
guarded_load : alt_load {
}
guarded_store : alt_store {
}
select {
}

// reserved register access:
rd_res_reg {
    arg : ( any:r any:i );
}
wr_res_reg {
    arg : ( any:o any:i );
}

// bundles:

bndl_opn {
}
pattern_bndl_opn {
}
// functional bundle generated by cosel:
func_bndl : bndl_opn {
}
// move bundle generated by amnesia, showcolor & rover:
mv_bndl : bndl_opn {
    arg : ( any:r any:i );
}

namespace {
}

multicycle32 : multicycle {
}

right_padding12 : right_padding {
}


//-- PRIMITIVE TYPES --

prim typ w08<8t>[-128,127,1];
prim typ w16<16t>[-32768,32767,1];
prim typ w32<32t>[-2147483648,2147483647,1];
prim typ u08<8u>[0,255,1];
prim typ addr<32u>[0,4294967295,1];
prim typ iword<32u>[0,4294967295,1];
prim typ t1u<1u>[0,1,1];
prim typ t2u<2u>[0,3,1];
prim typ t5u<5u>[0,31,1];
prim typ t6u<6u>[0,63,1];
prim typ t8u<8u>[0,255,1];
prim typ t12s<12t>[-2048,2047,1];
prim typ t5unz<5u>[1,31,1];
prim typ t13s_s2<13t>[-4096,4095,2];
prim typ t20s_rp12<20t>[-524288,524287,1];
prim typ t21s_s2<21t>[-1048576,1048575,2];
prim typ t31s_rp1<31t>[-1073741824,1073741823,1];


//-- PRIMITIVE OPERATIONS --

// /*primitive*/ w32 add(w32, w32)
w32_add_w32_w32 : user_defined, commutative, primitive {
    fnm : "add" '/*primitive*/ w32 add(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 sub(w32, w32)
w32_sub_w32_w32 : user_defined, primitive {
    fnm : "sub" '/*primitive*/ w32 sub(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 slt(w32, w32)
w32_slt_w32_w32 : user_defined, primitive {
    fnm : "slt" '/*primitive*/ w32 slt(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 sltu(w32, w32)
w32_sltu_w32_w32 : user_defined, primitive {
    fnm : "sltu" '/*primitive*/ w32 sltu(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 seq0(w32)
w32_seq0_w32 : user_defined, chess_view_opn, primitive {
    fnm : "seq0" '/*primitive*/ w32 seq0(w32)'; 
    arg : ( w32:r w32:i );
}

// /*primitive*/ w32 sne0(w32)
w32_sne0_w32 : user_defined, chess_view_opn, primitive {
    fnm : "sne0" '/*primitive*/ w32 sne0(w32)'; 
    arg : ( w32:r w32:i );
}

// /*primitive*/ w32 band(w32, w32)
w32_band_w32_w32 : user_defined, commutative, primitive {
    fnm : "band" '/*primitive*/ w32 band(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 bor(w32, w32)
w32_bor_w32_w32 : user_defined, commutative, primitive {
    fnm : "bor" '/*primitive*/ w32 bor(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 bxor(w32, w32)
w32_bxor_w32_w32 : user_defined, commutative, primitive {
    fnm : "bxor" '/*primitive*/ w32 bxor(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 sll(w32, w32)
w32_sll_w32_w32 : user_defined, primitive {
    fnm : "sll" '/*primitive*/ w32 sll(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 srl(w32, w32)
w32_srl_w32_w32 : user_defined, primitive {
    fnm : "srl" '/*primitive*/ w32 srl(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 sra(w32, w32)
w32_sra_w32_w32 : user_defined, primitive {
    fnm : "sra" '/*primitive*/ w32 sra(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 mul(w32, w32)
w32_mul_w32_w32 : user_defined, chess_view_opn, commutative, primitive {
    fnm : "mul" '/*primitive*/ w32 mul(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 mulh(w32, w32)
w32_mulh_w32_w32 : user_defined, chess_view_opn, commutative, primitive {
    fnm : "mulh" '/*primitive*/ w32 mulh(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 mulhsu(w32, w32)
w32_mulhsu_w32_w32 : user_defined, chess_view_opn, primitive {
    fnm : "mulhsu" '/*primitive*/ w32 mulhsu(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 mulhu(w32, w32)
w32_mulhu_w32_w32 : user_defined, chess_view_opn, commutative, primitive {
    fnm : "mulhu" '/*primitive*/ w32 mulhu(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ void mul_hw(w32, w32, t2u, w32 &, w32 &)
void_mul_hw_w32_w32_t2u_w32_w32 : user_defined, primitive {
    fnm : "mul_hw" '/*primitive*/ void mul_hw(w32, w32, t2u, w32 &, w32 &)'; 
    arg : ( w32:i w32:i t2u:i w32:o w32:o );
}

// /*primitive*/ bool eq(w32, w32)
bool_eq_w32_w32 : user_defined, commutative, primitive {
    fnm : "eq" '/*primitive*/ bool eq(w32, w32)'; 
    arg : ( bool:r w32:i w32:i );
}

// /*primitive*/ bool lt(w32, w32)
bool_lt_w32_w32 : user_defined, primitive {
    fnm : "lt" '/*primitive*/ bool lt(w32, w32)'; 
    arg : ( bool:r w32:i w32:i );
}

// /*primitive*/ bool ltu(w32, w32)
bool_ltu_w32_w32 : user_defined, primitive {
    fnm : "ltu" '/*primitive*/ bool ltu(w32, w32)'; 
    arg : ( bool:r w32:i w32:i );
}

// /*primitive*/ bool ne(w32, w32)
bool_ne_w32_w32 : user_defined, commutative, primitive {
    fnm : "ne" '/*primitive*/ bool ne(w32, w32)'; 
    arg : ( bool:r w32:i w32:i );
}

// /*primitive*/ bool ge(w32, w32)
bool_ge_w32_w32 : user_defined, primitive {
    fnm : "ge" '/*primitive*/ bool ge(w32, w32)'; 
    arg : ( bool:r w32:i w32:i );
}

// /*primitive*/ bool geu(w32, w32)
bool_geu_w32_w32 : user_defined, primitive {
    fnm : "geu" '/*primitive*/ bool geu(w32, w32)'; 
    arg : ( bool:r w32:i w32:i );
}

// /*primitive*/ w32 sext(w08)
w32_sext_w08 : user_defined, promotion_conversion, primitive {
    fnm : "sext" '/*primitive*/ w32 sext(w08)'; 
    arg : ( w32:r w08:i );
}

// /*primitive*/ w32 zext(w08)
w32_zext_w08 : user_defined, promotion_conversion, primitive {
    fnm : "zext" '/*primitive*/ w32 zext(w08)'; 
    arg : ( w32:r w08:i );
}

// /*primitive*/ w32 sext(w16)
w32_sext_w16 : user_defined, promotion_conversion, primitive {
    fnm : "sext" '/*primitive*/ w32 sext(w16)'; 
    arg : ( w32:r w16:i );
}

// /*primitive*/ w32 zext(w16)
w32_zext_w16 : user_defined, promotion_conversion, primitive {
    fnm : "zext" '/*primitive*/ w32 zext(w16)'; 
    arg : ( w32:r w16:i );
}

// /*primitive*/ w32 divs(w32, w32)
w32_divs_w32_w32 : user_defined, multicycle32, primitive {
    fnm : "divs" '/*primitive*/ w32 divs(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 rems(w32, w32)
w32_rems_w32_w32 : user_defined, multicycle32, primitive {
    fnm : "rems" '/*primitive*/ w32 rems(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 divu(w32, w32)
w32_divu_w32_w32 : user_defined, multicycle32, primitive {
    fnm : "divu" '/*primitive*/ w32 divu(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 remu(w32, w32)
w32_remu_w32_w32 : user_defined, multicycle32, primitive {
    fnm : "remu" '/*primitive*/ w32 remu(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 jal(t21s_s2)
w32_jal_t21s_s2 : user_defined, call, relative, primitive {
    fnm : "jal" '/*primitive*/ w32 jal(t21s_s2)'; 
    arg : ( w32:r t21s_s2:i );
}

// /*primitive*/ w32 jalr(w32)
w32_jalr_w32 : user_defined, absolute, call, primitive {
    fnm : "jalr" '/*primitive*/ w32 jalr(w32)'; 
    arg : ( w32:r w32:i );
}

// /*primitive*/ void j(t21s_s2)
void_j_t21s_s2 : user_defined, chess_view_opn, jump, relative, primitive {
    fnm : "j" '/*primitive*/ void j(t21s_s2)'; 
    arg : ( t21s_s2:i );
}

// /*primitive*/ void jr(w32)
void_jr_w32 : user_defined, absolute, chess_view_opn, jump, primitive {
    fnm : "jr" '/*primitive*/ void jr(w32)'; 
    arg : ( w32:i );
}

// /*primitive*/ void br(bool, t13s_s2)
void_br_bool_t13s_s2 : user_defined, jump, relative, primitive {
    fnm : "br" '/*primitive*/ void br(bool, t13s_s2)'; 
    arg : ( bool:i t13s_s2:i );
}

// /*primitive*/ void nop()
void_nop : user_defined, chess_view_opn, nop, primitive {
    fnm : "nop" '/*primitive*/ void nop()'; 
}

// /*primitive*/ w32 zext_08(w32)
w32_zext_08_w32 : user_defined, chess_view_opn, primitive {
    fnm : "zext_08" '/*primitive*/ w32 zext_08(w32)'; 
    arg : ( w32:r w32:i );
}

// /*primitive*/ w32(t5u)
w32_w32_t5u : user_defined, conversion, primitive {
    fnm : "w32" '/*primitive*/ w32(t5u)'; 
    arg : ( w32:r t5u:i );
}

// /*primitive*/ w32(t12s)
w32_w32_t12s : user_defined, conversion, primitive {
    fnm : "w32" '/*primitive*/ w32(t12s)'; 
    arg : ( w32:r t12s:i );
}

// /*primitive*/ w32(t20s_rp12)
w32_w32_t20s_rp12 : user_defined, right_padding12, conversion, primitive {
    fnm : "w32" '/*primitive*/ w32(t20s_rp12)'; 
    arg : ( w32:r t20s_rp12:i );
}

// /*primitive*/ w32(addr)
w32_w32_addr : user_defined, conversion, primitive {
    fnm : "w32" '/*primitive*/ w32(addr)'; 
    arg : ( w32:r addr:i );
}

// /*primitive*/ w08(w32)
w08_w08_w32 : user_defined, conversion, primitive {
    fnm : "w08" '/*primitive*/ w08(w32)'; 
    arg : ( w08:r w32:i );
}

// /*primitive*/ w16(w32)
w16_w16_w32 : user_defined, conversion, primitive {
    fnm : "w16" '/*primitive*/ w16(w32)'; 
    arg : ( w16:r w32:i );
}

// /*primitive*/ addr(w32)
addr_addr_w32 : user_defined, conversion, primitive {
    fnm : "addr" '/*primitive*/ addr(w32)'; 
    arg : ( addr:r w32:i );
}

