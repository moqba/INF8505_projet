/*
-- File : hzrd.n
--
-- Contents : nML model for the trv32p5 processor - bypass and stall rules.
--
-- Copyright (c) 2019-2021 Synopsys, Inc. This Synopsys processor model
-- captures an ASIP Designer Design Technique. The model and all associated
-- documentation are proprietary to Synopsys, Inc. and may only be used
-- pursuant to the terms and conditions of a written license agreement with
-- Synopsys, Inc.  All other use, reproduction, modification, or distribution
-- of the Synopsys processor model or the associated  documentation is
-- strictly prohibited.
*/

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ~~~ nML Components for X/F Bypass Rules
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

component bypass_rule (ident name, reg R, int dist, ident src, stage src_stage, trn dst) {
  bypass dist cycles class(name) () {
    stage src_stage..WB: R$[#]`WB` = ...`WB` = # src`src_stage`;
  } -> {
    stage ID: # dst = R$[#];
  }
}

// Integer Data Path
component bypass_X (ident name, int dist, ident src, stage src_stage) {
  instantiate bypass_rule (name, X, dist, src, src_stage, x_r1);
  instantiate bypass_rule (name, X, dist, src, src_stage, x_r2);
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ~~~ Bypass EX to ID if offset = 1 cycle
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// cycle            0  1  2  3  4  5  6  7  8
// add x4,x5,x6     IF ID EX ME WB
// addi x3,x4,1        IF ID EX ME WB
//                        ^^ bypass

// Integer Data Path
instantiate bypass_X (bypass_X_from_EX, 1, texX1, EX); // <<<< EXAMPLE 

// EXAMPLE: The above marked nested nML component instantiation is
// expanded in two steps (bypass_X, bypass_rule) as follows:
//
// bypass 1 cycles class(bypass_X_from_EX) () {
//   stage EX..WB: X$[#]`WB` = ...`WB` = # tex1`EX`;
// } -> {
//   stage ID: # x_r1 = X$[#];
// }
//
// bypass 1 cycles class(bypass_X_from_EX) () {
//   stage EX..WB: X$[#]`WB` = ...`WB` = # tex1`EX`;
// } -> {
//   stage ID: # x_r2 = X$[#];
// }


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ~~~ Bypass ME to ID if offset = 2 cycles
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// cycle            0  1  2  3  4  5  6  7  8
// add x4,x5,x6     IF ID EX ME WB
// ...                 IF ID EX ME WB
// addi x3,x4,1           IF ID EX ME WB
//                           ^^ bypass

// Integer Data Path
instantiate bypass_X (bypass_X_from_ME, 2, tmeX1, ME);


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ~~~ Bypass WB to ID if offset = 3 cycles
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// cycle            0  1  2  3  4  5  6  7  8
// add x4,x5,x6     IF ID EX ME WB
// ...                 IF ID EX ME WB
// ...                    IF ID EX ME WB
// addi x3,x4,1              IF ID EX ME WB
//                              ^^ bypass

// Integer Data Path
instantiate bypass_X (bypass_X_from_WB, 3, pmeX1, WB);


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ~~~ Hardware Stalls for Load/Store Instructions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ~~~ Stall if load data is used

// Hazard condition
// cycle            0  1  2  3  4  5  6  7  8
// ld x3,4(x5)      IF ID EX ME WB
//                        ^^ DM request
//                           ^^ DM response
// add x6,x3,x4        IF ID EX ME WB
//                        ^^ read x3 before load result is available

// Integer Data Path

hw_stall 1 cycles class(read_X_after_load) () {
  stage ME..WB: X$[#] = lxR; // load result path
} -> {
  stage ID: ... = X$[#];
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ~~~ Hardware Stalls for Multiply Instructions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Hazard condition
// cycle            0  1  2  3  4  5  6  7  8
// mul x3,x4,x5     IF ID EX ME WB
//                        ^^ start
//                           ^^ finish
// add x6,x3,x4        IF ID EX ME WB
//                        ^^ read x3 before multiplication is ready

hw_stall 1 cycles class(read_after_mpy) () {
  stage ME..WB: X$[#] = mpyR;
} -> {
  stage ID: ... = X$[#];
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ~~~ Hardware Stalls for Division Instructions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Assumption: cycles(2) annotated to div

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ~~~ Stall when an instruction reads the result while unit is still busy (RAW)

hw_stall trn class(read_after_div) () {
  trn(div_bsy); address_trn(div_adr);
} -> {
  ... = X$[#];
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ~~~ Do not write to destination register before div result is written (WAW)

hw_stall trn class(write_after_div) () {
  trn(div_bsy); address_trn(div_adr);
} -> {
  X$[#] = ...;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ~~~ No new division may be started while the previous is still busy

hw_stall trn class(div_busy) () {
  trn(div_bsy);
} -> {
  class(div);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ~~~ No instruction may use register write port when result is written

hw_stall trn class(div_wp) () {
  trn(div_w3c);
} -> {
  rsrc(x_w1 `WB`);
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ~~~ Software Stalls for Branch Instructions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Taken branches have 2 delay slots. While debugging hardware (on-chip
// debugging), we forbid hardware breakpoints in these 2 delay slots, because
// OCD breakpoints are triggered by fetching, not by instruction commit.
// Software breakpoints are fine, since they trigger in EX, while branches remove
// only instructions in IF and ID stages.

// HW Breakpoints
sw_stall 1..2 instructions () {
  cycles(3|1), class(branch);
} -> {
  special(pdc_hw_breakpoint);
}
