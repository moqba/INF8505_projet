/*
-- File : hazards.n
--
-- Contents : nML model for the ILX processor - bypass and stall rules.
--
-- Copyright (c) 2014-2021 Synopsys, Inc. This Synopsys processor model
-- captures an ASIP Designer Design Technique. The model and all associated
-- documentation are proprietary to Synopsys, Inc. and may only be used
-- pursuant to the terms and conditions of a written license agreement with
-- Synopsys, Inc.  All other use, reproduction, modification, or distribution
-- of the Synopsys processor model or the associated  documentation is
-- strictly prohibited.
*/



component bypass_rule (ident name, reg R, int dist, trn src, stage src_stage, trn dst, pipe pipeP) {
  bypass dist cycles class(name) () {
    stage src_stage..WB: R$[#]`WB` = ...`WB` = # src`src_stage`;
  } -> {
    stage ID: #pipeP=dst = R$[#];
  }
}

// Integer Data Path
component bypass_X ( ident name, int dist, trn src, stage src_stage ) {
  instantiate bypass_rule (name, R, dist, src, src_stage, r_r1, pidR1);
  instantiate bypass_rule (name, R, dist, src, src_stage, r_r2, pidR2);
}

// bypasses for write port r_w1
instantiate bypass_X (bypass_from_EX, 1, texR1, EX); // <<<< EXAMPLE

// EXAMPLE: The above marked nested nML component instantiation is
// expanded in two steps (bypass_X, bypass_rule) as follows:

// bypass 1 cycles class(bypass_from_EX) () {
//   stage EX..WB: R$[#]`WB` = ...`WB` = # texR1`EX`;
// } -> {
//   stage ID: # pidR1 = r_r1 = R$[#];
// }

// bypass 1 cycles class(bypass_from_EX) () {
//   stage EX..WB: R$[#]`WB` = ...`WB` = # texR1`EX`;
// } -> {
//   stage ID: # pidR2 = r_r2 = R$[#];
// }

instantiate bypass_X (bypass_from_ME, 2, tmeR1, ME);

instantiate bypass_X (bypass_from_WB, 3, r_w1, WB);

// bypasses for write port r_w2
instantiate bypass_X (bypass_from_EX, 1, texR2, EX);

instantiate bypass_X (bypass_from_ME, 2, tmeR2, ME);

instantiate bypass_X (bypass_from_WB, 3, r_w2, WB);



component hw_stall_rule (ident name, reg R, int dist, trn src, stage src_stage) {
  hw_stall dist cycles class(name) () {
    stage src_stage..WB: R$[#]`WB` = ...`WB` = src`src_stage`;
  } -> {
    stage ID: ... = R$[#];
  }
}

// Integer Data Path
component hw_stall_X ( ident name, int dist, trn src, stage src_stage ) {
  instantiate hw_stall_rule (name, R, dist, src, src_stage);
}

// stall when result of multiplication is used in next instruction
instantiate hw_stall_X (hw_stall_mpy, 1, mpyC, ME); //
// EXAMPLE: The above marked nested nML component instantiation is
// expanded in (hw_stall_X, hw_stall_rule) as follows:

// hw_stall 1 cycles class(hw_stall_mpy) () {
//   stage ME..WB: R$[#]`WB` = ...`WB` = # mpyC`ME`;
// } -> {
//   stage ID:  ... = R$[#];
// }

instantiate hw_stall_X (hw_stall_mpy, 1, mpyD, ME); //

instantiate hw_stall_X (hw_stall_mpy, 1, lxC, ME); //
#if !defined(__programmers_view__)

// stall if next instruction is dependent on division results
hw_stall trn class(hw_stall_div_dep)  ()  { trn(div_busy_raw);  } -> { stage ID: ... = PL; } // quotient
hw_stall trn class(hw_stall_div_dep)  ()  { trn(div_busy_raw);  } -> { stage ID: ... = PH; } // remainder

// stall division while previous division is still active
hw_stall trn class(hw_stall_div_busy) ()  { trn(div_busy) ; } -> { stage EX: divide(divA, divB, wl, wh); }

// stall instructions that write to result register of division
hw_stall trn class(hw_stall_div_out)  ()  { trn(div_busy_wb); } -> { stage WB: PL = ...; }
hw_stall trn class(hw_stall_div_out)  ()  { trn(div_busy_wb); } -> { stage WB: PH = ...; }
#endif

