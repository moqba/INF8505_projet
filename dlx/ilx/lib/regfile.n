/*
-- File : regfile.n
--
-- Contents : nML model for the ILX processor -- main register file access.
--
-- Copyright (c) 2014-2021 Synopsys, Inc. This Synopsys processor model
-- captures an ASIP Designer Design Technique. The model and all associated
-- documentation are proprietary to Synopsys, Inc. and may only be used
-- pursuant to the terms and conditions of a written license agreement with
-- Synopsys, Inc.  All other use, reproduction, modification, or distribution
-- of the Synopsys processor model or the associated  documentation is
-- strictly prohibited.
*/

trn pl_ph_read  <uint1>; hw_init pl_ph_read  = 0;
trn pl_ph_write <uint1>; hw_init pl_ph_write = 0;

enum eR {r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15};
mode mR_(r: eR)  {
    value: R[r];
    read_action: switch (r) {
        case r12 | r13: pl_ph_read = 1;
        default:
    }
    write_action: stage ID: switch (r) {
        case r12 | r13: pl_ph_write = 1;
        default:
    }
    syntax: r;
    image: "0"::r;
}

chess_view() { pidR1 = SR; } -> { pidR1 = get_sr_cv(); }

mode mSR()  { value: SR;                                syntax: "sr"; }
mode mSPH() { value: host_SP  read(sph_r) write(sph_w); syntax: "host_SP"; }
mode mPCH() { value: host_PC  read(pch_r) write(pch_w); syntax: "host_PC"; }
mode mCMD() { value: host_CMD read(cmd_r) write(cmd_w); syntax: "host_CMD"; }
mode mCTX() { value: host_CTX read(ctx_r) write(ctx_w); syntax: "host_CTX"; }

mode mW(mSR|mCMD|mCTX|mSPH|mPCH) make_exclusive;
mode mR(mR_ | mW) { image : mR_ | "1x"::mW; }

mode rexR1(r: mR) { read_value: pidR1; read_action: stage ID: pidR1=r_r1=r; syntax: r; image: r ;}
mode rexR2(r: mR) { read_value: pidR2; read_action: stage ID: pidR2=r_r2=r; syntax: r; image: r ;}

mode wexR1(r: mR) { write_value: texR1; write_action { stage EX: pexR1 = texR1; stage ME: pmeR1 = tmeR1 = pexR1; stage ID..WB: r`WB` = r_w1`WB` = pmeR1`WB`; } syntax: r; image: r; }
mode wmeR1(r: mR) { write_value: tmeR1; write_action {                          stage ME: pmeR1 = tmeR1;         stage ID..WB: r`WB` = r_w1`WB` = pmeR1`WB`; } syntax: r; image: r; }
mode wexR2(r: mR) { write_value: texR2; write_action { stage EX: pexR2 = texR2; stage ME: pmeR2 = tmeR2 = pexR2; stage ID..WB: r`WB` = r_w2`WB` = pmeR2`WB`; } syntax: r; image: r; }

// single field write operations

mode wexLR() { write_value : texR1; write_action { stage EX: pexR1 = texR1; stage ME: pmeR1 = tmeR1 = pexR1; stage WB: LR = r_w1 = pmeR1; } syntax: "r15"; image: ""; }

mode wmePL() { write_value : tmeR1; write_action { stage ME: pmeR1 = tmeR1; stage WB: PL = r_w1 = pmeR1; } syntax: ""; image: "";}
mode wmePH() { write_value : tmeR2; write_action { stage ME: pmeR2 = tmeR2; stage WB: PH = r_w2 = pmeR2; } syntax: ""; image: "";}

// Reading R0 yields 0.

chess_view() { r_r1 = R[0]; } -> { r_r1 = 0; }
chess_view() { r_r2 = R[0]; } -> { r_r2 = 0; }

hw_init R = others => 0;

