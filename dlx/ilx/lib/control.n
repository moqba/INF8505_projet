/*
-- File : control.n
--
-- Contents : nML model for the ILX processor -- control instructions.
--
-- Copyright (c) 2014-2021 Synopsys, Inc. This Synopsys processor model
-- captures an ASIP Designer Design Technique. The model and all associated
-- documentation are proprietary to Synopsys, Inc. and may only be used
-- pursuant to the terms and conditions of a written license agreement with
-- Synopsys, Inc.  All other use, reproduction, modification, or distribution
-- of the Synopsys processor model or the associated  documentation is
-- strictly prohibited.
*/

opn control_instr( br_instr | j_instr | jal_instr | jalr_instr | jr_instr | nop_instr
                 | jti_instr | rti_instr | tk_test_and_set | tk_clear
                 | swbrk_instr );

// Jump pipeline for j and jal
//
// i   : j    : IF  ID  EX  ME  WB
// i+1 : ds1  :     IF  ID  EX  ME  WB
// i+2 : t1   :         IF  ID  EX  ME  WB

// Jump pipeline for jalr, jar, beqz-taken and bnez-taken
// Branch not taken pipeline: beqz-not-taken and bnez-not-taken
//
// i   : beqz : IF  ID  EX  ME  WB
// i+1 : ds1  :     IF  ID  EX  ME  WB
// i+2 : ds2  :         IF  ID  EX  ME  WB
// i+3 : n1   :             IF  ID  EX  ME  WB

trn cnd<bool>;
trn of16<int16>;
trn of26<int26>;
trn trgt<w32>;

trn tex_lnk<w32>;   hw_init tex_lnk = 0; // link to the instruction in the pre-fetch stage (PC+1)
#define DS1
#define DS2

fu eq;   // test beqz or bnez
trn eqA<w32>;

fu  pca;
trn pcaA<w32>;
trn pcaB<w32>;
trn pcaC<w32>;

trn lnk_if<w32>;
hw_init lnk_if = 0;

opn br_instr(op: opcode, a: rexR1, i: c16s)
{
    action { DS1 DS2
    stage ID..EX:
        eqA=a`EX`;
    stage EX:
        switch (op) {
        case beqz: cnd = eqz(eqA) @eq;
        case bnez: cnd = nez(eqA) @eq;
        }
        br(cnd,of16=i);
    }
    syntax : op " " a ",#" dec i;
    image  : op::a::"00000"::i,class(jump_ex) ;
}

opn j_instr(i: c26s)
{
    action { DS1
    stage EX:
        j(of26=i);
    }
    syntax : "j #" dec i;
    image  : opcode.j::i, class(jump_id);
}

opn jal_instr(lr: wexLR, i: c26s)
{
    action {
    stage EX:
        tex_lnk = jal(of26=i);
    stage ID..WB:
        lr = tex_lnk`EX`;
    }
    syntax : "jal #" dec i;
    dummy_syntax : lr;
    image  : opcode.jal::i;
    image  : opcode.jal::i, delay_slots(1), chess_pc_offset(1), class(jump_id);
}

opn jalr_instr(lr: wexLR, b: rexR1)
{
    action { DS1 DS2
    stage ID..EX:
        trgt=b`EX`;
    stage EX:
        tex_lnk = jalr(trgt);
    stage EX..WB:
        lr = tex_lnk`EX`;
    }
    syntax : "jalr " b;
    dummy_syntax : lr;
    image  : opcode.jalr::b::"00000"::"0000000000000000",class(jump_ex) ;
}

opn jr_instr(a: rexR1)
{
    action { DS1 DS2
    stage ID..EX:
        trgt=a`EX`;
    stage EX:
        jr(trgt);
    }
    syntax : "jr " a;
    image  : opcode.jr::a::"00000"::"0000000000000000", class(jump_ex);
}

opn nop_instr()
{
    action { stage ID: nop(); }
    syntax : "nop";
    image  : opcode.function::"00000"::"00000"::"00000"::function_code.nop;
}

trn en_i<ctxt>;
trn en_c<uint1>;

opn jti_instr() {
    action {
        stage EX: host_CMD = cmd_w = 0;
                  jti(trgt = pch_r = host_PC);
                  EN = en_w = set_bit(en_r = EN, en_i = ctx_r = host_CTX, en_c = 1);
        stage ME: pmeR1 = tmeR1 = sph_r = host_SP;
        stage WB: SP = r_w1 = pmeR1;
    }
    image: opcode.jti::"00000000000000000000000000", pdg_encoding();
}

opn rti_instr()
{
    action { stage EX:
        rti();
#ifdef _THREADED
        EN = en_w = set_bit(en_r = EN, en_i = context_id_EX, en_c = 0);
#endif
    }
    syntax: "rti";
    image  : opcode.rti::"00000000000000000000000000";
}





