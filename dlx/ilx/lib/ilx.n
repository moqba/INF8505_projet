/*
-- File : ilx.n
--
-- Contents : nML model for the ILX processor.
--
-- Copyright (c) 2014-2021 Synopsys, Inc. This Synopsys processor model
-- captures an ASIP Designer Design Technique. The model and all associated
-- documentation are proprietary to Synopsys, Inc. and may only be used
-- pursuant to the terms and conditions of a written license agreement with
-- Synopsys, Inc.  All other use, reproduction, modification, or distribution
-- of the Synopsys processor model or the associated  documentation is
-- strictly prohibited.
*/

#include "ilx_define.h"

#include "ilx_threaded.h"
#ifndef _THREADED
#define ILX_HAS_SINGLE_STAGE
#endif

#if !defined(ILX_HAS_SINGLE_STAGE)
enum stage_names {
  PF,   // Pre-fetch
  IF,   // Instruction Fetch
  ID,   // Instruction Decode,   read registers
  EX,   // EXecute
  ME,   // MEmory
  WB    // Write Back registers
};
#define _pipe pipe

#else // PIPELINED ^^^ | vvv ONE_STAGE

#define PF IF
enum stage_names {IF, ID};
#define EX ID
#define ME ID
#define WB ID
#define _pipe trn

#endif
// memories

def pm_size=2**PM_SIZE_NBIT;
mem PMb[pm_size,1] <w08,addr>;

mem PM[pm_size,4] <iword,addr> alias PMb access {
   pm_ld`PF` : pm_rd `IF` = PM[pm_ad`PF`] `IF`;
   pm_st     : PM[pm_ad]  = pm_wr;
};

property unconnected : PM; // PMb has property program_memory, but PM is accessed by PCU

def dm_size=2**DM_SIZE_NBIT;
mem DMb [dm_size,1]<w08,addr> access {
    dmb_ld`EX`: dmb_rd `ME` = DMb[dm_ad `EX`] `ME`;
    dmb_st`EX`: DMb[dm_ad `EX`] `ME` = dmb_wr `EX`;
};

mem DMh [dm_size,2]<w16,addr> alias DMb access {
    dmh_ld`EX`: dmh_rd `ME` = DMh[dm_ad `EX`] `ME`;
    dmh_st`EX`: DMh[dm_ad `EX`] `ME` = dmh_wr `EX`;
};

mem DMw [dm_size,4]<w32,addr> alias DMb access {
    dmw_ld`EX`: dmw_rd `ME` = DMw[dm_ad `EX`] `ME`;
    dmw_st`EX`: DMw[dm_ad `EX`] `ME` = dmw_wr `EX`;
};

// subrange used to store static data with efficient 15 bit direct addressing.

mem DMb_stat [2**15,1]<w08,addr> alias DMb[0] access {};
mem DMh_stat [2**15,2]<w16,addr> alias DMb_stat access {};
mem DMw_stat [2**15,4]<w32,addr> alias DMb_stat access {};
property unconnected : DMb_stat, DMh_stat, DMw_stat;

// registers
reg R[16]<w32,uint4> syntax ("R") read(r_r1 r_r2) write(r_w1 r_w2);


reg SP <w32> alias R[1]  read(r_r1) write(r_w1);     // stack pointer
reg LR <w32> alias R[15] read(r_r1) write(r_w1);     // link register

reg PL <w32> alias R[12] read(r_r1) write(r_w1 wl);  // low product
reg PH <w32> alias R[13] read(r_r2) write(r_w2 wh);  // high product

reg PC <w32> read(pcr_PF pcr_IF pcr_EX) write(pcw);  // program counter

reg MC <uint1>;                                      // MSB/Carry bit
reg EN <state> read(en_r) write(en_w);               // activity of threads
hw_init EN = 1;                                      // first context emulates host
reg TK <uint1> read(tk_r) write(tk_w);               // token for mutual exclusion
hw_init TK = 0;
properties { exclude_from_additional_register_contexts: EN, TK; }

reg SR <uint6> { EN; TK; MC; };                      // grouped on OCD

// host interface
reg host_CMD<uint1> read(cmd_r) write(cmd_w); hw_init host_CMD = 0;
reg host_CTX<ctxt>  read(ctx_r) write(ctx_w);
reg host_PC<w32>    read(pch_r) write(pch_w);
reg host_SP<w32>    read(sph_r) write(sph_w);
properties { exclude_from_additional_register_contexts: host_SP, host_PC, host_CTX, host_CMD; }

#ifdef _THREADED
trn context_IF<ctxt>; hw_init context_IF = 0;
properties {
    additional_register_contexts: 3;
    context_issue_trn: context_IF;
}
#endif

outport ctx_id<ctxt>;
outport lrsc_ena<uint1>; hw_init lrsc_ena=0; trn trn_lrsc_ena<uint1>;
inport  lrsc_ack<uint1>;



// pipeline registers
_pipe pidR1 <w32>;                                    // source 1 (ID->EX)
_pipe pidR2 <w32>;                                    // source 2 (ID->EX)
_pipe pexR1 <w32>;                                    // destination 1 (EX->ME)
_pipe pmeR1 <w32>;                                    // destination 1 (ME->WR)

_pipe pexR2 <w32>;                                    // destination 2 (EX->ME)
_pipe pmeR2 <w32>;                                    // destination 2 (ME->WR)

trn texR1<w32>;                                      // input of pexR1, is used in bypass rules
trn tmeR1<w32>;                                      // input of pmeR1, is used in bypass rules

trn texR2<w32>;                                      // input of pexR2, is used in bypass rules
trn tmeR2<w32>;                                      // input of pmeR2, is used in bypass rules



// constants
cst c5s   <int5>;
cst c16s  <int16>;
cst c26s  <int26>;

cst c4u   <uint4>;
cst c5u   <uint5>;
cst c16u  <uint16>;

cst c16p  <int16p>;


// properties

properties {
    program_counter : PC;
    program_memory  : PMb;
    endianness      : little;
    decode_stage    : ID;
    unconnected     : SP;
    chess_pc_offset : instructions;
}

// start of instruction set grammar

start ilx;

opn ilx ( alu_instr
        | load_store_instr
        | control_instr
        | div_instr
        );

#if defined(__go__)
opn always (ocd: ocd_if) { action { ocd; } }
#endif


#include "opcode.n"
#include "regfile.n"
#include "alu.n"
#include "ldst.n"
#include "control.n"
#include "div.n"
#include "ocd_if.n"
#include "mutex.n"


