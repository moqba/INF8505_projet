
// File generated by noodle version Q-2020.03#7e5ed72dc8#200717, Wed Mar 22 14:16:27 2023
// Copyright 2014-2020 Synopsys, Inc. All rights reserved.
// noodle -Pc -Iisg +wisg -Iruntime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=300 +NOrlt -D__chess__ -D__programmers_view__ dlx

#ifdef __chess__
#error "generated native file not intended for compilation by chess"
#endif

// Native C++ types and functions

#ifndef _dlx_chess_types_h
#define _dlx_chess_types_h

#include "chess.h"
#include "vbit.h"

#include "dlx_iss_types.h"

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wparentheses"
#endif

#ifdef CHESS_NATIVE_NAMESPACE
namespace CHESS_NATIVE_NAMESPACE {
#endif


//  Application types (declarations)

//  (none)

//class float;          // property( 32 bit /*sign_magnitude*/ 8 exp_bits /*exp_biased*/ ieee /*msb_implicit_integral*/ );
//class double;         // property( 64 bit /*sign_magnitude*/ 11 exp_bits /*exp_biased*/ ieee /*msb_implicit_integral*/ );
//class long double;    // property( 64 bit /*sign_magnitude*/ 11 exp_bits /*exp_biased*/ /*layout_sign_exp_frac*/ /*msb_implicit_integral*/ );


#include <stdint.h>
extern long long dbl2expo(double, int bits, int sign, int expo, int sexp, int layo, int mbit, int zexp);
extern double expo2dbl(long long, int bits, int sign, int expo, int sexp, int layo, int mbit, int zexp);
// fast ieee versions, with NaN support, and avoiding (float)(double)(float) which isn't idempotent for some NaNs
inline int32_t flt2ieee(float   a) { return (int32_t&)a; }
inline int64_t dbl2ieee(double  a) { return (int64_t&)a; }
inline float   ieee2flt(int32_t a) { return (float  &)a; }
inline double  ieee2dbl(int64_t a) { return (double &)a; }

//  Built-in type wrappers (bit-true behaviour or used as vector element type)

namespace dlx_BT {

//class BTbool /* std C conforming */

//class BT__schar /* std C conforming */

//class BT__uchar /* std C conforming */

//class BT__sshort /* std C conforming */

//class BT__ushort /* std C conforming */

//class BT__sint /* std C conforming */

//class BT__uint /* std C conforming */

//class BT__slonglong /* std C conforming */

//class BT__ulonglong /* std C conforming */

//class BT__ffloat /* std C conforming */

//class BT__fdouble /* std C conforming */

} //namespace dlx_BT


//  Application types (definitions)

//  Application types (additional)

#ifndef do_not_generate_additional_appl_types /*trouble-shooting hook*/

namespace dlx_primitive {
    struct dint {
        unsigned high;
        unsigned low;
        typedef VBit<64, false> BitType;
#ifndef do_not_generate_member_fn_declrs /*trouble-shooting hook*/
#ifdef __cplusplus
        inline dint(unsigned, unsigned);
        dint() = default;
#endif /*__cplusplus*/
#endif
    };
}

typedef struct dlx_primitive::dint float64;

typedef unsigned float32;

#endif /*do_not_generate_additional_appl_types*/


//  Conversions

inline int as_int32(float a)            { return flt2ieee(a); }
inline float as_float(int a)            { return ieee2flt(a); }
inline long long as_int64(double a)     { return dbl2ieee(a); }
inline double as_double(long long a)    { return ieee2dbl(a); }

//  Operations

//TBD

//  Chess_message hook for printing text between chess_reports (native only)

#define chess_message(msg) std::cout << msg << std::endl


#ifndef do_not_generate_chess_assert /*trouble-shooting hook*/

//  Chess_assert ancillary functions (native emulating ISS)

#define chess_assert(val)  (void)(chess_assert_(val)||chess_assert_msg(__FILE__,__LINE__))

inline int chess_assert_msg(const char* file, int line) {
    std::cout.flush();
    std::cerr << "ERROR Assertion failed in \"" << file << "\", line " << line << ".\n";
    return 0;
}

//  Overloaded chess_assert functions (allow to assert types without operator bool())

inline int chess_assert_(bool a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(char a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(signed char a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(unsigned char a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(short a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(unsigned short a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(int a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(unsigned a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(long a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(unsigned long a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(long long a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(unsigned long long a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(float a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(double a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(long double a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(const volatile void* a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(dlx_primitive::w08 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(dlx_primitive::w16 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(dlx_primitive::w32 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(dlx_primitive::addr a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(dlx_primitive::iword a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(dlx_primitive::uint1 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(dlx_primitive::uint4 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(dlx_primitive::uint5 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(dlx_primitive::uint16 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(dlx_primitive::int5 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(dlx_primitive::int16 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(dlx_primitive::int16p a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(dlx_primitive::int26 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(dlx_primitive::uint2 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(dlx_primitive::uint10 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(dlx_primitive::uint24 a) {
  return toVBit(a) != 0 ? 1 : 0;
}

#endif /*!do_not_generate_chess_assert*/


#ifndef do_not_generate_chess_report /*trouble-shooting hook*/

//  Chess_report ancillary functions (common to ISS and native)

inline void chess_report_hex(int bits, long long val, std::ostream& os) {
    auto flags(os.flags());
    os << " 0x" << std::hex << std::setfill('0') << std::setw((bits+3)/4) << CHESS_MASKLL(val,bits);
    os.flags(flags);
}
inline void chess_report_signed  (long long  val, std::ostream& os) {
    auto flags(os.flags());
    os << ' ' << std::dec << val;
    os.flags(flags);
}
inline void chess_report_unsigned(unsigned long long val, std::ostream& os) {
    auto flags(os.flags());
    os << ' ' << std::dec << val;
    os.flags(flags);
}
inline void chess_report_expo(int prc, double val, std::ostream& os) {
    auto flags(os.flags());
    os << ' ' << std::scientific << std::setprecision(prc) << val;
    os.flags(flags);
}

//  Overloaded chess_report functions

inline void chess_report(bool a) {
    std::ostream& os = std::cout;
    os << "chess_report(bool):";
    chess_report_hex(1, a, os);
    os << " //";
    chess_report_unsigned(a, os);
    os << std::endl;
}
inline void chess_report(char a) {
    std::ostream& os = std::cout;
    os << "chess_report(char):";
    chess_report_hex(8, a, os);
    os << " //";
    chess_report_signed(a, os);
    os << std::endl;
}
inline void chess_report(signed char a) {
    std::ostream& os = std::cout;
    os << "chess_report(signed char):";
    chess_report_hex(8, a, os);
    os << " //";
    chess_report_signed(a, os);
    os << std::endl;
}
inline void chess_report(unsigned char a) {
    std::ostream& os = std::cout;
    os << "chess_report(unsigned char):";
    chess_report_hex(8, a, os);
    os << " //";
    chess_report_unsigned(a, os);
    os << std::endl;
}
inline void chess_report(short a) {
    std::ostream& os = std::cout;
    os << "chess_report(short):";
    chess_report_hex(16, a, os);
    os << " //";
    chess_report_signed(a, os);
    os << std::endl;
}
inline void chess_report(unsigned short a) {
    std::ostream& os = std::cout;
    os << "chess_report(unsigned short):";
    chess_report_hex(16, a, os);
    os << " //";
    chess_report_unsigned(a, os);
    os << std::endl;
}
inline void chess_report(int a) {
    std::ostream& os = std::cout;
    os << "chess_report(int):";
    chess_report_hex(32, a, os);
    os << " //";
    chess_report_signed(a, os);
    os << std::endl;
}
inline void chess_report(unsigned a) {
    std::ostream& os = std::cout;
    os << "chess_report(unsigned):";
    chess_report_hex(32, a, os);
    os << " //";
    chess_report_unsigned(a, os);
    os << std::endl;
}
inline void chess_report(long a) {
    std::ostream& os = std::cout;
    os << "chess_report(long):";
    chess_report_hex(32, a, os);
    os << " //";
    chess_report_signed(a, os);
    os << std::endl;
}
inline void chess_report(unsigned long a) {
    std::ostream& os = std::cout;
    os << "chess_report(unsigned long):";
    chess_report_hex(32, a, os);
    os << " //";
    chess_report_unsigned(a, os);
    os << std::endl;
}
inline void chess_report(long long a) {
    std::ostream& os = std::cout;
    os << "chess_report(long long):";
    chess_report_hex(64, a, os);
    os << " //";
    chess_report_signed(a, os);
    os << std::endl;
}
inline void chess_report(unsigned long long a) {
    std::ostream& os = std::cout;
    os << "chess_report(unsigned long long):";
    chess_report_hex(64, a, os);
    os << " //";
    chess_report_unsigned(a, os);
    os << std::endl;
}
inline void chess_report(float a) {
    std::ostream& os = std::cout;
    os << "chess_report(float):";
    chess_report_hex(32, flt2ieee(a), os);
    os << " //";
    chess_report_expo(7, a, os);
    os << std::endl;
}
inline void chess_report(double a) {
    std::ostream& os = std::cout;
    os << "chess_report(double):";
    chess_report_hex(64, dbl2ieee(a), os);
    os << " //";
    chess_report_expo(16, a, os);
    os << std::endl;
}
inline void chess_report(long double a) {
    std::ostream& os = std::cout;
    os << "chess_report(long double):";
    chess_report_hex(64, dbl2ieee(a), os);
    os << " //";
    chess_report_expo(16, a, os);
    os << std::endl;
}
inline void chess_report(const volatile void* a) {
    std::ostream& os = std::cout;
    os << "chess_report(void*):";
    chess_report_hex(sizeof(void*)*8/*no mask*/, (unsigned long long)a, os);
    os << " //";
    chess_report_unsigned((unsigned long long)a, os);
    os << std::endl;
}
inline void chess_report(dlx_primitive::w08 a) {
    std::ostream& os = std::cout;
    os << "chess_report(dlx_primitive::w08):";
    chess_report_hex(8, toVBit(a).value(), os);
    os << " //";
    chess_report_signed(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(dlx_primitive::w16 a) {
    std::ostream& os = std::cout;
    os << "chess_report(dlx_primitive::w16):";
    chess_report_hex(16, toVBit(a).value(), os);
    os << " //";
    chess_report_signed(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(dlx_primitive::w32 a) {
    std::ostream& os = std::cout;
    os << "chess_report(dlx_primitive::w32):";
    chess_report_hex(32, toVBit(a).value(), os);
    os << " //";
    chess_report_signed(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(dlx_primitive::addr a) {
    std::ostream& os = std::cout;
    os << "chess_report(dlx_primitive::addr):";
    chess_report_hex(32, toVBit(a).value(), os);
    os << " //";
    chess_report_unsigned(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(dlx_primitive::iword a) {
    std::ostream& os = std::cout;
    os << "chess_report(dlx_primitive::iword):";
    chess_report_hex(32, toVBit(a).value(), os);
    os << " //";
    chess_report_unsigned(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(dlx_primitive::uint1 a) {
    std::ostream& os = std::cout;
    os << "chess_report(dlx_primitive::uint1):";
    chess_report_hex(1, toVBit(a).value(), os);
    os << " //";
    chess_report_unsigned(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(dlx_primitive::uint4 a) {
    std::ostream& os = std::cout;
    os << "chess_report(dlx_primitive::uint4):";
    chess_report_hex(4, toVBit(a).value(), os);
    os << " //";
    chess_report_unsigned(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(dlx_primitive::uint5 a) {
    std::ostream& os = std::cout;
    os << "chess_report(dlx_primitive::uint5):";
    chess_report_hex(5, toVBit(a).value(), os);
    os << " //";
    chess_report_unsigned(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(dlx_primitive::uint16 a) {
    std::ostream& os = std::cout;
    os << "chess_report(dlx_primitive::uint16):";
    chess_report_hex(16, toVBit(a).value(), os);
    os << " //";
    chess_report_unsigned(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(dlx_primitive::int5 a) {
    std::ostream& os = std::cout;
    os << "chess_report(dlx_primitive::int5):";
    chess_report_hex(5, toVBit(a).value(), os);
    os << " //";
    chess_report_signed(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(dlx_primitive::int16 a) {
    std::ostream& os = std::cout;
    os << "chess_report(dlx_primitive::int16):";
    chess_report_hex(16, toVBit(a).value(), os);
    os << " //";
    chess_report_signed(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(dlx_primitive::int16p a) {
    std::ostream& os = std::cout;
    os << "chess_report(dlx_primitive::int16p):";
    chess_report_hex(16, toVBit(a).value(), os);
    os << " //";
    chess_report_signed(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(dlx_primitive::int26 a) {
    std::ostream& os = std::cout;
    os << "chess_report(dlx_primitive::int26):";
    chess_report_hex(26, toVBit(a).value(), os);
    os << " //";
    chess_report_signed(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(dlx_primitive::uint2 a) {
    std::ostream& os = std::cout;
    os << "chess_report(dlx_primitive::uint2):";
    chess_report_hex(2, toVBit(a).value(), os);
    os << " //";
    chess_report_unsigned(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(dlx_primitive::uint10 a) {
    std::ostream& os = std::cout;
    os << "chess_report(dlx_primitive::uint10):";
    chess_report_hex(10, toVBit(a).value(), os);
    os << " //";
    chess_report_unsigned(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(dlx_primitive::uint24 a) {
    std::ostream& os = std::cout;
    os << "chess_report(dlx_primitive::uint24):";
    chess_report_hex(24, toVBit(a).value(), os);
    os << " //";
    chess_report_unsigned(toVBit(a).value(), os);
    os << std::endl;
}

#endif /*!do_not_generate_chess_report*/


#ifndef do_not_generate_chess_cycle_count /*trouble-shooting hook*/

// stub, but with correct (largest suitable) return type on dlx (may influence C++ overloading)
inline unsigned long long chess_cycle_count() { return 0; }

#endif /*!do_not_generate_chess_cycle_count*/


#ifndef do_not_generate_chess_return_address /*trouble-shooting hook*/

#if defined __GNUC__
#define chess_return_address() ((void*)__builtin_return_address(0))
#elif defined _WIN32
#include <intrin.h>
#pragma intrinsic(_ReturnAddress)
#define chess_return_address() ((void*)_ReturnAddress())
#else /*stub*/
#define chess_return_address() ((void*)0)
#endif

#endif /*!do_not_generate_chess_return_address*/


#ifndef do_not_generate_chess_stop_exit /*trouble-shooting hook*/

#include <stdlib.h>
#define chess_stop()  _Exit(0)

#define chess_exit(x) _Exit(x)

#endif /*!do_not_generate_chess_stop_exit*/


#ifndef do_not_generate_chess_dont_care /*trouble-shooting hook*/

#define chess_dont_care(T) chess_dont_care_<T>()
template<typename T>
T chess_dont_care_() { return T(); }
#endif /*!do_not_generate_chess_dont_care*/


#define chess_error(x) chess_stop()


#ifdef CHESS_NATIVE_NAMESPACE
} //namespace CHESS_NATIVE_NAMESPACE
#endif

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif


#endif /*_dlx_chess_types_h*/
