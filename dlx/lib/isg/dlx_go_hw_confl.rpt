
// File generated by Go version Q-2020.03#7e5ed72dc8#200717, Wed Mar 22 14:16:28 2023
// Copyright 2014-2020 Synopsys, Inc. All rights reserved.

HW conflicts on transitories of dlx


<<<< Enable option -s to see instruction patterns (may be slow). >>>>


<<<< Enable debug mode (option -d1) to see HW conflicts between
     operations with different 'strength'. >>>>


<<<< Enable option -n to obtain an nML rule derivation for each source reference (may be slow). >>>>


<<<< Enable option -v to obtain all source references for each conflict (may be slow). >>>>



dmb_wr stage 2 : conflict for
		<option -s prints instruction bit pattern here (may be slow)>
  dmb_wr_copy0_sxB_EX  : IN( sxB `EX` ) OUT( dmb_wr `EX` )
  <---> 
  dmb_wr_rd_ocd_data_ocd_st_DMb_EX_alw  : IN( ocd_data `EX` ) GRD( ocd_st_DMb `EX` ) OUT( dmb_wr `EX` )


      source code reference for conflict
      [ldst.n:71] dmb_wr `EX` = sxB `EX` = extract_w08 (sxW `EX` = pS2 `EX`)  @sx;
        <>
      [ocd_if.n:65] DMb[dm_addr `EX` = ocd_addr_r `EX`] `ME` = dmb_wr `EX` = ocd_data `EX`;


      (refined) source code reference for conflict
      [ldst.n:71] dmb_wr `EX` = sxB `EX`
        <>
      [ocd_if.n:65] DMb[dm_addr `EX` = ocd_addr_r `EX`] `ME` = dmb_wr `EX` = ocd_data `EX`


dm_addr stage 2 : conflict for
		<option -s prints instruction bit pattern here (may be slow)>
  dm_addr_copy0_aguC_EX  : IN( aguC `EX` ) OUT( dm_addr `EX` )
  <---> 
  dm_addr_copy0_ocd_addr_r_ocd_ld_DMb_EX_alw  : IN( ocd_addr_r `EX` ) GRD( ocd_ld_DMb `EX` ) OUT( dm_addr `EX` )


      source code reference for conflict
      [ldst.n:40] dm_addr `EX` = aguC `EX` = add (aguA `EX` = pS1 `EX`, aguB `EX` = i `EX`)  @agu;
        <>
      [ocd_if.n:58] ocd_data `ME` = dmb_rd = DMb[dm_addr `EX` = ocd_addr_r `EX`] `ME`;


      (refined) source code reference for conflict
      [ldst.n:40] dm_addr `EX` = aguC `EX`
        <>
      [ocd_if.n:58] dm_addr `EX` = ocd_addr_r `EX`


dm_addr stage 2 : conflict for
		<option -s prints instruction bit pattern here (may be slow)>
  dm_addr_copy0_aguC_EX  : IN( aguC `EX` ) OUT( dm_addr `EX` )
  <---> 
  dm_addr_copy0_ocd_addr_r_ocd_st_DMb_EX_alw  : IN( ocd_addr_r `EX` ) GRD( ocd_st_DMb `EX` ) OUT( dm_addr `EX` )


      source code reference for conflict
      [ldst.n:40] dm_addr `EX` = aguC `EX` = add (aguA `EX` = pS1 `EX`, aguB `EX` = i `EX`)  @agu;
        <>
      [ocd_if.n:65] DMb[dm_addr `EX` = ocd_addr_r `EX`] `ME` = dmb_wr `EX` = ocd_data `EX`;


      (refined) source code reference for conflict
      [ldst.n:40] dm_addr `EX` = aguC `EX`
        <>
      [ocd_if.n:65] dm_addr `EX` = ocd_addr_r `EX`


dm_addr stage 2 : conflict for
		<option -s prints instruction bit pattern here (may be slow)>
  dm_addr_copy0_aguA_EX  : IN( aguA `EX` ) OUT( dm_addr `EX` )
  <---> 
  dm_addr_copy0_ocd_addr_r_ocd_ld_DMb_EX_alw  : IN( ocd_addr_r `EX` ) GRD( ocd_ld_DMb `EX` ) OUT( dm_addr `EX` )


      source code reference for conflict
      [ldst.n:102] dm_addr `EX` = aguA `EX`;
        <>
      [ocd_if.n:58] ocd_data `ME` = dmb_rd = DMb[dm_addr `EX` = ocd_addr_r `EX`] `ME`;


      (refined) source code reference for conflict
      [ldst.n:102] dm_addr `EX` = aguA `EX`
        <>
      [ocd_if.n:58] dm_addr `EX` = ocd_addr_r `EX`


dm_addr stage 2 : conflict for
		<option -s prints instruction bit pattern here (may be slow)>
  dm_addr_copy0_aguA_EX  : IN( aguA `EX` ) OUT( dm_addr `EX` )
  <---> 
  dm_addr_copy0_ocd_addr_r_ocd_st_DMb_EX_alw  : IN( ocd_addr_r `EX` ) GRD( ocd_st_DMb `EX` ) OUT( dm_addr `EX` )


      source code reference for conflict
      [ldst.n:102] dm_addr `EX` = aguA `EX`;
        <>
      [ocd_if.n:65] DMb[dm_addr `EX` = ocd_addr_r `EX`] `ME` = dmb_wr `EX` = ocd_data `EX`;


      (refined) source code reference for conflict
      [ldst.n:102] dm_addr `EX` = aguA `EX`
        <>
      [ocd_if.n:65] dm_addr `EX` = ocd_addr_r `EX`


dm_addr stage 2 : conflict for
		<option -s prints instruction bit pattern here (may be slow)>
  dm_addr_copy0_ocd_addr_r_ocd_ld_DMb_EX_alw  : IN( ocd_addr_r `EX` ) GRD( ocd_ld_DMb `EX` ) OUT( dm_addr `EX` )
  <---> 
  dm_addr_copy0_ocd_addr_r_ocd_st_DMb_EX_alw  : IN( ocd_addr_r `EX` ) GRD( ocd_st_DMb `EX` ) OUT( dm_addr `EX` )

	------------------------------------------------------------
	This hardware conflict is non-existent if the (different)
	GUARD CONDITIONS of both operations are mutually exclusive.
	------------------------------------------------------------

      source code reference for conflict
      [ocd_if.n:58] ocd_data `ME` = dmb_rd = DMb[dm_addr `EX` = ocd_addr_r `EX`] `ME`;
        <>
      [ocd_if.n:65] DMb[dm_addr `EX` = ocd_addr_r `EX`] `ME` = dmb_wr `EX` = ocd_data `EX`;


      (refined) source code reference for conflict
      [ocd_if.n:58] dm_addr `EX` = ocd_addr_r `EX`
        <>
      [ocd_if.n:65] dm_addr `EX` = ocd_addr_r `EX`


dmb_rd stage 3 : conflict for
		<option -s prints instruction bit pattern here (may be slow)>
  dmb_rd_ld_DMb_dm_addr_EX  : IN( DMb `ME` dm_addr `EX` ) OUT( dmb_rd `ME` )
  <---> 
  dmb_rd_ld_DMb_dm_addr_ocd_ld_DMb_EX_alw  : IN( DMb `ME` dm_addr `EX` ) GRD( ocd_ld_DMb `EX` ) OUT( dmb_rd `ME` )


      source code reference for conflict
      [ldst.n:43] dmb_rd `ME` = DMb[dm_addr `EX`] `ME`;
        <>
      [ocd_if.n:58] ocd_data `ME` = dmb_rd = DMb[dm_addr `EX` = ocd_addr_r `EX`] `ME`;


      (refined) source code reference for conflict
      [ldst.n:43] dmb_rd `ME` = DMb[dm_addr `EX`] `ME`
        <>
      [ocd_if.n:58] ocd_data `ME` = dmb_rd = DMb[dm_addr `EX` = ocd_addr_r `EX`] `ME`


ocd_addr_w stage 2 : conflict for
		<option -s prints instruction bit pattern here (may be slow)>
  ocd_addr_w_incr1_ocd_addr_r_ocd_addr_incr_ocd_ld_DMb_EX_alw  incr1: IN( ocd_addr_r `EX` ) GRD( ocd_ld_DMb `EX` ) OUT( ocd_addr_w `EX` ) @ ocd_addr_incr
  <---> 
  ocd_addr_w_incr1_ocd_addr_r_ocd_addr_incr_ocd_st_DMb_EX_alw  incr1: IN( ocd_addr_r `EX` ) GRD( ocd_st_DMb `EX` ) OUT( ocd_addr_w `EX` ) @ ocd_addr_incr

	------------------------------------------------------------
	This hardware conflict is non-existent if the (different)
	GUARD CONDITIONS of both operations are mutually exclusive.
	------------------------------------------------------------

      source code reference for conflict
      [ocd_if.n:56] ocd_addr `EX` = ocd_addr_w `EX` = incr1 (ocd_addr_r `EX` = ocd_addr `EX`)  @ocd_addr_incr;
        <>
      [ocd_if.n:63] ocd_addr `EX` = ocd_addr_w `EX` = incr1 (ocd_addr_r `EX` = ocd_addr `EX`)  @ocd_addr_incr;


      (refined) source code reference for conflict
      [ocd_if.n:56] ocd_addr `EX` = ocd_addr_w `EX`
        <>
      [ocd_if.n:63] ocd_addr `EX` = ocd_addr_w `EX`


ocd_addr_w stage 2 : conflict for
		<option -s prints instruction bit pattern here (may be slow)>
  ocd_addr_w_incr1_ocd_addr_r_ocd_addr_incr_ocd_ld_DMb_EX_alw  incr1: IN( ocd_addr_r `EX` ) GRD( ocd_ld_DMb `EX` ) OUT( ocd_addr_w `EX` ) @ ocd_addr_incr
  <---> 
  ocd_addr_w_incr4_ocd_addr_r_ocd_addr_incr_ocd_st_PMb_EX_alw  incr4: IN( ocd_addr_r `EX` ) GRD( ocd_st_PMb `EX` ) OUT( ocd_addr_w `EX` ) @ ocd_addr_incr

	------------------------------------------------------------
	This hardware conflict is non-existent if the (different)
	GUARD CONDITIONS of both operations are mutually exclusive.
	------------------------------------------------------------

      source code reference for conflict
      [ocd_if.n:56] ocd_addr `EX` = ocd_addr_w `EX` = incr1 (ocd_addr_r `EX` = ocd_addr `EX`)  @ocd_addr_incr;
        <>
      [ocd_if.n:78] ocd_addr `EX` = ocd_addr_w `EX` = incr4 (ocd_addr_r `EX` = ocd_addr `EX`)  @ocd_addr_incr;


      (refined) source code reference for conflict
      [ocd_if.n:56] ocd_addr `EX` = ocd_addr_w `EX`
        <>
      [ocd_if.n:78] ocd_addr `EX` = ocd_addr_w `EX`


ocd_addr_w stage 2 : conflict for
		<option -s prints instruction bit pattern here (may be slow)>
  ocd_addr_w_incr1_ocd_addr_r_ocd_addr_incr_ocd_st_DMb_EX_alw  incr1: IN( ocd_addr_r `EX` ) GRD( ocd_st_DMb `EX` ) OUT( ocd_addr_w `EX` ) @ ocd_addr_incr
  <---> 
  ocd_addr_w_incr4_ocd_addr_r_ocd_addr_incr_ocd_st_PMb_EX_alw  incr4: IN( ocd_addr_r `EX` ) GRD( ocd_st_PMb `EX` ) OUT( ocd_addr_w `EX` ) @ ocd_addr_incr

	------------------------------------------------------------
	This hardware conflict is non-existent if the (different)
	GUARD CONDITIONS of both operations are mutually exclusive.
	------------------------------------------------------------

      source code reference for conflict
      [ocd_if.n:63] ocd_addr `EX` = ocd_addr_w `EX` = incr1 (ocd_addr_r `EX` = ocd_addr `EX`)  @ocd_addr_incr;
        <>
      [ocd_if.n:78] ocd_addr `EX` = ocd_addr_w `EX` = incr4 (ocd_addr_r `EX` = ocd_addr `EX`)  @ocd_addr_incr;


      (refined) source code reference for conflict
      [ocd_if.n:63] ocd_addr `EX` = ocd_addr_w `EX`
        <>
      [ocd_if.n:78] ocd_addr `EX` = ocd_addr_w `EX`


ocd_addr_r stage 2 : conflict for
		<option -s prints instruction bit pattern here (may be slow)>
  ocd_addr_r_rd_ocd_addr_ocd_ld_DMb_EX_alw  : IN( ocd_addr `EX` ) GRD( ocd_ld_DMb `EX` ) OUT( ocd_addr_r `EX` )
  <---> 
  ocd_addr_r_rd_ocd_addr_ocd_st_DMb_EX_alw  : IN( ocd_addr `EX` ) GRD( ocd_st_DMb `EX` ) OUT( ocd_addr_r `EX` )

	------------------------------------------------------------
	This hardware conflict is non-existent if the (different)
	GUARD CONDITIONS of both operations are mutually exclusive.
	------------------------------------------------------------

      source code reference for conflict
      [ocd_if.n:56] ocd_addr `EX` = ocd_addr_w `EX` = incr1 (ocd_addr_r `EX` = ocd_addr `EX`)  @ocd_addr_incr;
        <>
      [ocd_if.n:63] ocd_addr `EX` = ocd_addr_w `EX` = incr1 (ocd_addr_r `EX` = ocd_addr `EX`)  @ocd_addr_incr;


      (refined) source code reference for conflict
      [ocd_if.n:56] ocd_addr_r `EX` = ocd_addr `EX`
        <>
      [ocd_if.n:63] ocd_addr_r `EX` = ocd_addr `EX`


ocd_addr_r stage 2 : conflict for
		<option -s prints instruction bit pattern here (may be slow)>
  ocd_addr_r_rd_ocd_addr_ocd_ld_DMb_EX_alw  : IN( ocd_addr `EX` ) GRD( ocd_ld_DMb `EX` ) OUT( ocd_addr_r `EX` )
  <---> 
  ocd_addr_r_rd_ocd_addr_ocd_st_PMb_EX_alw  : IN( ocd_addr `EX` ) GRD( ocd_st_PMb `EX` ) OUT( ocd_addr_r `EX` )

	------------------------------------------------------------
	This hardware conflict is non-existent if the (different)
	GUARD CONDITIONS of both operations are mutually exclusive.
	------------------------------------------------------------

      source code reference for conflict
      [ocd_if.n:56] ocd_addr `EX` = ocd_addr_w `EX` = incr1 (ocd_addr_r `EX` = ocd_addr `EX`)  @ocd_addr_incr;
        <>
      [ocd_if.n:78] ocd_addr `EX` = ocd_addr_w `EX` = incr4 (ocd_addr_r `EX` = ocd_addr `EX`)  @ocd_addr_incr;


      (refined) source code reference for conflict
      [ocd_if.n:56] ocd_addr_r `EX` = ocd_addr `EX`
        <>
      [ocd_if.n:78] ocd_addr_r `EX` = ocd_addr `EX`


ocd_addr_r stage 2 : conflict for
		<option -s prints instruction bit pattern here (may be slow)>
  ocd_addr_r_rd_ocd_addr_ocd_st_DMb_EX_alw  : IN( ocd_addr `EX` ) GRD( ocd_st_DMb `EX` ) OUT( ocd_addr_r `EX` )
  <---> 
  ocd_addr_r_rd_ocd_addr_ocd_st_PMb_EX_alw  : IN( ocd_addr `EX` ) GRD( ocd_st_PMb `EX` ) OUT( ocd_addr_r `EX` )

	------------------------------------------------------------
	This hardware conflict is non-existent if the (different)
	GUARD CONDITIONS of both operations are mutually exclusive.
	------------------------------------------------------------

      source code reference for conflict
      [ocd_if.n:63] ocd_addr `EX` = ocd_addr_w `EX` = incr1 (ocd_addr_r `EX` = ocd_addr `EX`)  @ocd_addr_incr;
        <>
      [ocd_if.n:78] ocd_addr `EX` = ocd_addr_w `EX` = incr4 (ocd_addr_r `EX` = ocd_addr `EX`)  @ocd_addr_incr;


      (refined) source code reference for conflict
      [ocd_if.n:63] ocd_addr_r `EX` = ocd_addr `EX`
        <>
      [ocd_if.n:78] ocd_addr_r `EX` = ocd_addr `EX`


pcaC stage 2 : conflict for
		<option -s prints instruction bit pattern here (may be slow)>
  le_offs_copy0___CTint16_cstP16_EX_pcaC_2  : IN( __CTint16_cstP16_EX `EX` ) OUT( le_offs `EX` )
  <---> 
  pcaC_pcadd_pcaA_pcaB_pca_EX  pcadd: IN( pcaA `EX` pcaB `EX` ) OUT( pcaC `EX` ) @ pca


      source code reference for conflict
      [control.n:153] le_offs `EX` = last `EX` rsrc(pcaC`EX`) ;
        <>
      [control.n:158] pcaC `EX` = pcadd (pcaA `EX` = pcr `EX` = PC `EX`, pcaB `EX`)  @pca;

