
// File generated by noodle version Q-2020.03#7e5ed72dc8#200717, Wed Mar 22 14:16:27 2023
// Copyright 2014-2020 Synopsys, Inc. All rights reserved.
// noodle -ps -Iisg +wisg -Iruntime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=300 +NOrlt -D__checkers__ dlx

toolrelease _20R1;

//-- CHESS GENERIC TYPES AND PRIMITIVES --

typ any<0>;
typ void<0>;
prim typ bool<1u>[0,1,1];

// general properties:

add_sub_inv {
}
chess_view {
}
chess_view_opn {
}
commutative {
}
conversion {
}
dont_disable_chess_view {
}
envelope {
}
envelope_open : envelope {
}
envelope_close : envelope {
}
isr_envelope_open : envelope_open {
}
isr_envelope_close : envelope_close {
}
event_opn {
}
early_clobbers {
}
expensive {
}
explicit {
}
immediate_repeat_count {
}
inlined {
}
isolate_status_uses {
}
multicycle {
}
no_duplicate_move {
}
no_pdg_definition {
}
primitive {
}
promoted {
}
promotion_conversion {
}
broadcast {
}
element_wise {
}
right_padding {
}
right_truncate {
}
unfoldable {
}
unused {
}
user_defined {
}
volatile {
}

assembly : event_opn {
}
called : event_opn {
}
chess_hosted : called {
}
chess_assert : chess_hosted, volatile {
}
chess_report : chess_hosted, volatile {
}
chess_stop : chess_hosted, volatile {
}
chess_cycle_count : chess_hosted {
}
chess_exit : chess_hosted, volatile {
}
chess_hosted_io : chess_hosted, volatile {
}
chess_separator : called {
}
chess_separator_scheduler : chess_separator {
}
chess_instruction_tracing_begin : chess_separator_scheduler {
}
chess_instruction_tracing_end : chess_separator_scheduler {
}
chess_profile_begin : chess_separator_scheduler {
}
chess_profile_end : chess_separator_scheduler {
}
chess_seqloop_test : chess_separator_scheduler {
}
chess_seqloop_end : chess_separator_scheduler {
}
chess_tcl_break : chess_separator_scheduler {
}
isr : event_opn {
}

nop : volatile {
}
never_returns : volatile {
}

instruction_properties {
}
instruction_class : instruction_properties {
}
cycles : instruction_properties {
}
words : instruction_properties {
}
alt_cycles : instruction_properties {
}
delay_slots : instruction_properties {
}
pc_offset : instruction_properties {
}

// SFG annotations:

chess_frequent_else : event_opn {
}
chess_frequent_then : event_opn {
}
chess_rear_then : event_opn {
}
chess_no_warn_pipelining : event_opn {
}
chess_modulo_scheduling_budget_ratio : event_opn {
    arg : ( any:i );
}
chess_pipeline_adjust_preamble : event_opn {
    arg : ( any:i );
}
chess_pipeline_initiation_interval : event_opn {
    arg : ( any:i );
}
chess_pipeline_non_leaf_loop_solution : event_opn {
    arg : ( any:i );
}
chess_peel_pipelined_loop : event_opn {
    arg : ( any:i );
}
chess_require_postamble : event_opn {
}

// source/sink operations:

inp : event_opn {
    arg : ( any:o );
}
out : event_opn {
    arg : ( any:i );
}
tr_inp : event_opn {
    arg : ( any:o );
}
tr_out : event_opn {
    arg : ( any:i );
}

st_def : event_opn {
    arg : ( any:o );
}
source : event_opn {
    arg : ( any:o );
}
sink : event_opn {
    arg : ( any:i );
}
sync_sink : sink {
}
to_route_sink : sink {
}
seqif_sink : event_opn {
    arg : ( any:i );
}

const : event_opn {
    arg : ( any:o );
}
const_inp : event_opn {
    arg : ( any:o );
}

undefined : event_opn {
    arg : ( any:o );
}
never : undefined {
}

chain_tie : event_opn {
}

keep_dead : event_opn {
    arg : ( any:i );
}

// flow operations:

flow_opn : event_opn {
}
fork : flow_opn {
    arg : ( any:o any:o any:i );
}
join : flow_opn {
    arg : ( any:o any:i any:i );
}

branch : fork {
}
merge : join {
}
gmerge : join {
}

entry : join {
}
exit : fork {
}

call_link : flow_opn {
    arg : ( any:o any:i );
}
// irremovable call link:
defval_call_link : event_opn {
    arg : ( any:o any:i );
}

sync_link : flow_opn {
    arg : ( any:o any:i );
}
sync_never : flow_opn {
    arg : ( any:o any:i );
}
// var assignment in C:
assign : event_opn {
    arg : ( any:r any:i );
}
deassign : assign {
}
direct_assign : assign {
}
strict_assign : assign {
}
// conversion without move:
in_situ_conv : event_opn {
    arg : ( any:r any:i );
}
// trn assignment in nML:
copy {
    arg : ( any:r any:i );
}
excl_in_move {
}

// heading operations:

heading : event_opn {
    arg : ( any:i );
}
if_expr : heading {
}
else_expr : event_opn {
    arg : ( any:i );
}
while_expr : heading {
}
for_count : heading {
}

// control operations:

cntrl {
}
absolute {
}
relative {
}
seqelsif {
}

call : cntrl {
}
near_call : cntrl {
}
doloop : cntrl {
}
doloop_no_cntrl : cntrl {
}
repeat : cntrl {
}
halt : cntrl, volatile {
}
jump : cntrl {
}
jti : jump {
}
ret : cntrl {
}
near_ret : cntrl {
}
rti : ret {
}
zloop_sink : event_opn {
    arg : ( any:i any:i any:i );
}
zloop_sink_absolute : zloop_sink, absolute {
}
zloop_sink_relative : zloop_sink, relative {
}

multi_register_pop {
}
multi_register_push {
}

// storage operations:

storage_opn {
}
l_storage_opn : storage_opn {
}
s_storage_opn : storage_opn {
}

a_fetch : l_storage_opn {
    arg : ( any:r any:i any:i );
}
a_update : s_storage_opn {
    arg : ( any:o any:i any:i );
}

load : a_fetch {
}
store : a_update {
}

read_file : a_fetch {
}
write_file : a_update {
}

read_reg : l_storage_opn {
    arg : ( any:r any:i );
}
write_reg : s_storage_opn {
    arg : ( any:r any:i );
}

// alternate storage operations:

alt_load {
}
alt_store {
}
guarded_load : alt_load {
}
guarded_store : alt_store {
}
select {
}

// reserved register access:
rd_res_reg {
    arg : ( any:r any:i );
}
wr_res_reg {
    arg : ( any:o any:i );
}

// bundles:

bndl_opn {
}
pattern_bndl_opn {
}
// functional bundle generated by cosel:
func_bndl : bndl_opn {
}
// move bundle generated by amnesia, showcolor & rover:
mv_bndl : bndl_opn {
    arg : ( any:r any:i );
}

namespace {
}

right_padding16 : right_padding {
}

multicycle32 : multicycle {
}


//-- PRIMITIVE TYPES --

prim typ w08<8t>[-128,127,1];
prim typ w16<16t>[-32768,32767,1];
prim typ w32<32t>[-2147483648,2147483647,1];
prim typ addr<32u>[0,4294967295,1];
prim typ iword<32u>[0,4294967295,1];
prim typ uint1<1u>[0,1,1];
prim typ uint4<4u>[0,15,1];
prim typ uint5<5u>[0,31,1];
prim typ uint16<16u>[0,65535,1];
prim typ int5<5t>[-16,15,1];
prim typ int16<16t>[-32768,32767,1];
prim typ int16p<16t>[-32768,32767,1];
prim typ int26<26t>[-33554432,33554431,1];
prim typ uint2<2u>[0,3,1];
prim typ uint10<10u>[0,1023,1];
prim typ uint24<24u>[0,16777215,1];


//-- PRIMITIVE OPERATIONS --

// /*primitive*/ w32 add(w32, w32, uint1 &)
w32_add_w32_w32_uint1 : user_defined, commutative, primitive {
    fnm : "add" '/*primitive*/ w32 add(w32, w32, uint1 &)'; 
    arg : ( w32:r w32:i w32:i uint1:o );
}

// /*primitive*/ w32 add(w32, w32)
w32_add_w32_w32 : user_defined, commutative, primitive {
    fnm : "add" '/*primitive*/ w32 add(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 sub(w32, w32, uint1 &)
w32_sub_w32_w32_uint1 : user_defined, primitive {
    fnm : "sub" '/*primitive*/ w32 sub(w32, w32, uint1 &)'; 
    arg : ( w32:r w32:i w32:i uint1:o );
}

// /*primitive*/ w32 addx(w32, w32, uint1, uint1 &)
w32_addx_w32_w32_uint1_uint1 : user_defined, commutative, primitive {
    fnm : "addx" '/*primitive*/ w32 addx(w32, w32, uint1, uint1 &)'; 
    arg : ( w32:r w32:i w32:i uint1:i uint1:o );
}

// /*primitive*/ w32 subx(w32, w32, uint1, uint1 &)
w32_subx_w32_w32_uint1_uint1 : user_defined, primitive {
    fnm : "subx" '/*primitive*/ w32 subx(w32, w32, uint1, uint1 &)'; 
    arg : ( w32:r w32:i w32:i uint1:i uint1:o );
}

// /*primitive*/ w32 band(w32, w32)
w32_band_w32_w32 : user_defined, commutative, primitive {
    fnm : "band" '/*primitive*/ w32 band(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 bor(w32, w32)
w32_bor_w32_w32 : user_defined, commutative, primitive {
    fnm : "bor" '/*primitive*/ w32 bor(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 bxor(w32, w32)
w32_bxor_w32_w32 : user_defined, commutative, primitive {
    fnm : "bxor" '/*primitive*/ w32 bxor(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 xtd(w32, w32)
w32_xtd_w32_w32 : user_defined, primitive {
    fnm : "xtd" '/*primitive*/ w32 xtd(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 mul(w32, w32)
w32_mul_w32_w32 : user_defined, commutative, primitive {
    fnm : "mul" '/*primitive*/ w32 mul(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ void lmulss(w32, w32, w32 &, w32 &)
void_lmulss_w32_w32_w32_w32 : user_defined, commutative, primitive {
    fnm : "lmulss" '/*primitive*/ void lmulss(w32, w32, w32 &, w32 &)'; 
    arg : ( w32:i w32:i w32:o w32:o );
}

// /*primitive*/ void lmulsu(w32, w32, w32 &, w32 &)
void_lmulsu_w32_w32_w32_w32 : user_defined, primitive {
    fnm : "lmulsu" '/*primitive*/ void lmulsu(w32, w32, w32 &, w32 &)'; 
    arg : ( w32:i w32:i w32:o w32:o );
}

// /*primitive*/ void lmuluu(w32, w32, w32 &, w32 &)
void_lmuluu_w32_w32_w32_w32 : user_defined, commutative, primitive {
    fnm : "lmuluu" '/*primitive*/ void lmuluu(w32, w32, w32 &, w32 &)'; 
    arg : ( w32:i w32:i w32:o w32:o );
}

// /*primitive*/ w32 sll(w32, w32)
w32_sll_w32_w32 : user_defined, primitive {
    fnm : "sll" '/*primitive*/ w32 sll(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 srl(w32, w32)
w32_srl_w32_w32 : user_defined, primitive {
    fnm : "srl" '/*primitive*/ w32 srl(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 sra(w32, w32)
w32_sra_w32_w32 : user_defined, primitive {
    fnm : "sra" '/*primitive*/ w32 sra(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 clb(w32)
w32_clb_w32 : user_defined, primitive {
    fnm : "clb" '/*primitive*/ w32 clb(w32)'; 
    arg : ( w32:r w32:i );
}

// /*primitive*/ w32 sge(w32, w32)
w32_sge_w32_w32 : user_defined, primitive {
    fnm : "sge" '/*primitive*/ w32 sge(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 sgt(w32, w32)
w32_sgt_w32_w32 : user_defined, primitive {
    fnm : "sgt" '/*primitive*/ w32 sgt(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 sle(w32, w32)
w32_sle_w32_w32 : user_defined, primitive {
    fnm : "sle" '/*primitive*/ w32 sle(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 slt(w32, w32)
w32_slt_w32_w32 : user_defined, primitive {
    fnm : "slt" '/*primitive*/ w32 slt(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 sgeu(w32, w32)
w32_sgeu_w32_w32 : user_defined, primitive {
    fnm : "sgeu" '/*primitive*/ w32 sgeu(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 sgtu(w32, w32)
w32_sgtu_w32_w32 : user_defined, primitive {
    fnm : "sgtu" '/*primitive*/ w32 sgtu(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 sleu(w32, w32)
w32_sleu_w32_w32 : user_defined, primitive {
    fnm : "sleu" '/*primitive*/ w32 sleu(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 sltu(w32, w32)
w32_sltu_w32_w32 : user_defined, primitive {
    fnm : "sltu" '/*primitive*/ w32 sltu(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 seq(w32, w32)
w32_seq_w32_w32 : user_defined, commutative, primitive {
    fnm : "seq" '/*primitive*/ w32 seq(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 sne(w32, w32)
w32_sne_w32_w32 : user_defined, commutative, primitive {
    fnm : "sne" '/*primitive*/ w32 sne(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 lhi(int16p)
w32_lhi_int16p : user_defined, promotion_conversion, right_padding16, primitive {
    fnm : "lhi" '/*primitive*/ w32 lhi(int16p)'; 
    arg : ( w32:r int16p:i );
}

// /*primitive*/ w32 extend_sign(w08)
w32_extend_sign_w08 : user_defined, promotion_conversion, primitive {
    fnm : "extend_sign" '/*primitive*/ w32 extend_sign(w08)'; 
    arg : ( w32:r w08:i );
}

// /*primitive*/ w32 extend_zero(w08)
w32_extend_zero_w08 : user_defined, promotion_conversion, primitive {
    fnm : "extend_zero" '/*primitive*/ w32 extend_zero(w08)'; 
    arg : ( w32:r w08:i );
}

// /*primitive*/ w32 extend_sign(w16)
w32_extend_sign_w16 : user_defined, promotion_conversion, primitive {
    fnm : "extend_sign" '/*primitive*/ w32 extend_sign(w16)'; 
    arg : ( w32:r w16:i );
}

// /*primitive*/ w32 extend_zero(w16)
w32_extend_zero_w16 : user_defined, promotion_conversion, primitive {
    fnm : "extend_zero" '/*primitive*/ w32 extend_zero(w16)'; 
    arg : ( w32:r w16:i );
}

// /*primitive*/ w08 extract_w08(w32)
w08_extract_w08_w32 : user_defined, promotion_conversion, primitive {
    fnm : "extract_w08" '/*primitive*/ w08 extract_w08(w32)'; 
    arg : ( w08:r w32:i );
}

// /*primitive*/ w16 extract_w16(w32)
w16_extract_w16_w32 : user_defined, promotion_conversion, primitive {
    fnm : "extract_w16" '/*primitive*/ w16 extract_w16(w32)'; 
    arg : ( w16:r w32:i );
}

// /*primitive*/ void divide(w32, w32, w32 &, w32 &)
void_divide_w32_w32_w32_w32 : user_defined, multicycle32, primitive {
    fnm : "divide" '/*primitive*/ void divide(w32, w32, w32 &, w32 &)'; 
    arg : ( w32:i w32:i w32:o w32:o );
}

// /*primitive*/ bool eqz(w32)
bool_eqz_w32 : user_defined, primitive {
    fnm : "eqz" '/*primitive*/ bool eqz(w32)'; 
    arg : ( bool:r w32:i );
}

// /*primitive*/ bool nez(w32)
bool_nez_w32 : user_defined, primitive {
    fnm : "nez" '/*primitive*/ bool nez(w32)'; 
    arg : ( bool:r w32:i );
}

// /*primitive*/ w32 seq0(w32)
w32_seq0_w32 : user_defined, chess_view_opn, primitive {
    fnm : "seq0" '/*primitive*/ w32 seq0(w32)'; 
    arg : ( w32:r w32:i );
}

// /*primitive*/ w32 sne0(w32)
w32_sne0_w32 : user_defined, chess_view_opn, primitive {
    fnm : "sne0" '/*primitive*/ w32 sne0(w32)'; 
    arg : ( w32:r w32:i );
}

// /*primitive*/ void br(bool, int16)
void_br_bool_int16 : user_defined, jump, relative, primitive {
    fnm : "br" '/*primitive*/ void br(bool, int16)'; 
    arg : ( bool:i int16:i );
}

// /*primitive*/ void j(int26)
void_j_int26 : user_defined, jump, relative, primitive {
    fnm : "j" '/*primitive*/ void j(int26)'; 
    arg : ( int26:i );
}

// /*primitive*/ void jr(w32)
void_jr_w32 : user_defined, absolute, jump, ret, primitive {
    fnm : "jr" '/*primitive*/ void jr(w32)'; 
    arg : ( w32:i );
}

// /*primitive*/ void nop()
void_nop : user_defined, nop, primitive {
    fnm : "nop" '/*primitive*/ void nop()'; 
}

// /*primitive*/ w32 jal(int26)
w32_jal_int26 : user_defined, call, relative, primitive {
    fnm : "jal" '/*primitive*/ w32 jal(int26)'; 
    arg : ( w32:r int26:i );
}

// /*primitive*/ w32 jalr(w32)
w32_jalr_w32 : user_defined, absolute, call, primitive {
    fnm : "jalr" '/*primitive*/ w32 jalr(w32)'; 
    arg : ( w32:r w32:i );
}

// /*primitive*/ void hwdo(w32, int16)
void_hwdo_w32_int16 : user_defined, doloop, relative, primitive {
    fnm : "hwdo" '/*primitive*/ void hwdo(w32, int16)'; 
    arg : ( w32:i int16:i );
}

// /*primitive*/ uint2 incr(uint2)
uint2_incr_uint2 : user_defined, primitive {
    fnm : "incr" '/*primitive*/ uint2 incr(uint2)'; 
    arg : ( uint2:r uint2:i );
}

// /*primitive*/ w32 pcadd(w32, w32)
w32_pcadd_w32_w32 : user_defined, primitive {
    fnm : "pcadd" '/*primitive*/ w32 pcadd(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 sign_extend_08(w32)
w32_sign_extend_08_w32 : user_defined, chess_view_opn, primitive {
    fnm : "sign_extend_08" '/*primitive*/ w32 sign_extend_08(w32)'; 
    arg : ( w32:r w32:i );
}

// /*primitive*/ w32 zero_extend_08(w32)
w32_zero_extend_08_w32 : user_defined, chess_view_opn, primitive {
    fnm : "zero_extend_08" '/*primitive*/ w32 zero_extend_08(w32)'; 
    arg : ( w32:r w32:i );
}

// /*primitive*/ w32 sign_extend_16(w32)
w32_sign_extend_16_w32 : user_defined, chess_view_opn, primitive {
    fnm : "sign_extend_16" '/*primitive*/ w32 sign_extend_16(w32)'; 
    arg : ( w32:r w32:i );
}

// /*primitive*/ w32 zero_extend_16(w32)
w32_zero_extend_16_w32 : user_defined, chess_view_opn, primitive {
    fnm : "zero_extend_16" '/*primitive*/ w32 zero_extend_16(w32)'; 
    arg : ( w32:r w32:i );
}

// /*primitive*/ w32(int16)
w32_w32_int16 : user_defined, conversion, primitive {
    fnm : "w32" '/*primitive*/ w32(int16)'; 
    arg : ( w32:r int16:i );
}

// /*primitive*/ w32(uint16)
w32_w32_uint16 : user_defined, conversion, primitive {
    fnm : "w32" '/*primitive*/ w32(uint16)'; 
    arg : ( w32:r uint16:i );
}

// /*primitive*/ w32(int5)
w32_w32_int5 : user_defined, conversion, primitive {
    fnm : "w32" '/*primitive*/ w32(int5)'; 
    arg : ( w32:r int5:i );
}

// /*primitive*/ w32(uint10)
w32_w32_uint10 : user_defined, conversion, primitive {
    fnm : "w32" '/*primitive*/ w32(uint10)'; 
    arg : ( w32:r uint10:i );
}

// /*primitive*/ w32(uint24)
w32_w32_uint24 : user_defined, conversion, primitive {
    fnm : "w32" '/*primitive*/ w32(uint24)'; 
    arg : ( w32:r uint24:i );
}

// /*primitive*/ addr(w32)
addr_addr_w32 : user_defined, conversion, primitive {
    fnm : "addr" '/*primitive*/ addr(w32)'; 
    arg : ( addr:r w32:i );
}

