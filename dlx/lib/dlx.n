/*
-- File : dlx.n
--
-- Contents : nML model for the DLX processor.
--
-- Copyright (c) 2014-2016 Synopsys, Inc. This Synopsys processor model 
-- captures an ASIP Designer Design Technique. The model and all associated 
-- documentation are proprietary to Synopsys, Inc. and may only be used 
-- pursuant to the terms and conditions of a written license agreement with 
-- Synopsys, Inc.  All other use, reproduction, modification, or distribution 
-- of the Synopsys processor model or the associated  documentation is 
-- strictly prohibited. 
*/

#include "dlx_define.h"

enum stage_names {IF,   // Instruction Fetch
                  ID,   // Instruction Decode,   read registers
                  EX,   // EXecute
                  ME,   // MEmory
                  WB};  // Write Back registers

// memories

def pm_size=2**PM_SIZE_NBIT;
mem PMb[pm_size,1] <w08,addr>;

mem PM[pm_size,4] <iword,addr> alias PMb access {
   ifetch : pm_rd `1` = PM[pm_addr] `1`;
   istore : PM[pm_addr] = pm_wr;
};

property unconnected : PM; // PMb has property program_memory, but PM is 
                           // accessed by PCU 

def dm_size=2**DM_SIZE_NBIT;
mem DMb [dm_size,1]<w08,addr> access {
    ld_dmb: dmb_rd `1` = DMb[dm_addr `0`] `1`;
    st_dmb: DMb[dm_addr `0`] `1` = dmb_wr `0`;
};

mem DMh [dm_size,2]<w16,addr> alias DMb access {
    ld_dmh: dmh_rd `1` = DMh[dm_addr `0`] `1`;
    st_dmh: DMh[dm_addr `0`] `1` = dmh_wr `0`;
};

mem DMw [dm_size,4]<w32,addr> alias DMb access {
    ld_dmw: dmw_rd `1` = DMw[dm_addr `0`] `1`;
    st_dmw: DMw[dm_addr `0`] `1` = dmw_wr `0`;
};

// subrange used to store static data with efficient 15 bit direct addressing.

mem DMb_stat [2**15,1]<w08,addr> alias DMb[0] access {};
mem DMh_stat [2**15,2]<w16,addr> alias DMb_stat access {};
mem DMw_stat [2**15,4]<w32,addr> alias DMb_stat access {};

property unconnected : DMb_stat, DMh_stat, DMw_stat;

// registers

reg R[32]<w32,uint5> syntax ("R") read(r1     // read port 1
                                       r2)    // read port 2
                                  write(w1    // write port 1
                                       w2);   // write port 2

reg SP <w32> alias R[1]  read(r1) write(w1);  // stack pointer 
reg LR <w32> alias R[15] read(r1) write(w1);  // link register

reg PL <w32> alias R[12] read(r1) write(w1 wl);  // low product 
reg PH <w32> alias R[13] read(r2) write(w2 wh);  // high product 

reg PC <w32> read(pcr) write(pcw);            // program counter

reg MC <uint1>;		                      // MSB/Carry bit 

// pipeline registers

pipe pS1 <w32>;       // source 1 (ID->EX)
pipe pS2 <w32>;       // source 2 (ID->EX)
pipe pD1 <w32>;       // destination 1 (EX->ME)
pipe pE1 <w32>;       // destination 1 (ME->WR)

pipe pD2 <w32>;       // destination 2 (EX->ME)
pipe pE2 <w32>;       // destination 2 (ME->WR)

trn pd1w<w32>;        // input of pD1, is used in bypass rules
trn pe1w<w32>;        // input of pE1, is used in bypass rules

trn pd2w<w32>;        // input of pD2, is used in bypass rules
trn pe2w<w32>;        // input of pE2, is used in bypass rules

#if defined(DLX_HAS_DOLOOP)
reg LF        <uint2> read(lfr lfra) write(lfw);  // loop flag 
reg LS[2]<addr,uint2> read(lsr) write(lsw);       // loop start address
reg LE[2]<addr,uint2> read(ler) write(lew);       // loop end address
reg LC[2]<w32 ,uint2> read(lcr) write(lcw);       // loop count
property unconnected : LF, LS, LE, LC;
hw_init LF = 3;  // no hardware loops active

cst c10u  <uint10>;

#endif

#ifdef DLX_HAS_ZLOOP

// zloop registers

reg ZC <w32>  read(zcr) write(zcw);     // loop count
#ifndef __programmers_view__
reg ZD <w32>  read(zdr) write(zcw);     // loop count shadow (zloop_count_invariant), shared write trn
#endif
reg ZS <addr> read(zsr) write(zsw);     // loop start address
reg ZE <addr> read(zer) write(zew);     // loop end address
property unconnected : ZC, ZS, ZE;
hw_init ZE = 0xfffffff;

#endif // def DLX_HAS_ZLOOP

// constants

cst c4u   <uint4>;
cst c5s   <int5>;
cst c5u   <uint5>;
cst c16s  <int16>;
cst c16u  <uint16>;
cst c16p  <int16p>;
cst c26s  <int26>;


// properties

properties {
    program_counter : PC;
    program_memory  : PMb;
    endianness      : big;
    decode_stage    : ID;
    unconnected     : SP;
    chess_pc_offset : instructions;
}

// start of instruction set grammar

start dlx;

opn dlx (alu_instr |
	 load_store_instr |
	 control_instr |
	 div_instr );

#if defined(__go__)
opn always (ocd: ocd_if) { action { ocd; } }
#endif


#include "opcode.n"
#include "regfile.n"
#include "alu.n"
#include "ldst.n"
#include "control.n"
#include "div.n"

#include "ocd_if.n"

#include "hazards.n"


