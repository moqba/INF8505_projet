/*
-- File : alu.n
--
-- Contents : nML model for the DLX processor -- ALU instructions.
--
-- Copyright (c) 2014-2016 Synopsys, Inc. This Synopsys processor model 
-- captures an ASIP Designer Design Technique. The model and all associated 
-- documentation are proprietary to Synopsys, Inc. and may only be used 
-- pursuant to the terms and conditions of a written license agreement with 
-- Synopsys, Inc.  All other use, reproduction, modification, or distribution 
-- of the Synopsys processor model or the associated  documentation is 
-- strictly prohibited. 
*/



opn alu_instr(alu_rrr | alu_rr | alu_rrr2 | alu_lmul |
	      alu_rri | alu_rru | alu_lhi);
	 
fu alu;
trn aluA<w32>;
trn aluB<w32>;
#if defined(__checkers__)
/*
This is a test case to reproduce the issue reported in CASE 8001247029
Checkers failed to see the dependency of aluC on aluC_WRITE; both of which 
are structs with the same elements
*/
trn aluCL<w16>;
trn aluCH<w16>;
trn aluC<w32> { aluCL; aluCH; };
trn aluC_WRITE<w32> { aluCL; aluCH; };
#define ALUC_WRITE aluC_WRITE
#else
trn aluC<w32>;
#define ALUC_WRITE aluC
#endif
trn aluI<w16>;
trn aluU<int16p>;
trn aluM<uint1>;
trn aluN<uint1>;

fu sh;
trn shA<w32>;
trn shB<w32>;
trn shC<w32>;

fu mpy;
trn mpyA<w32>;
trn mpyB<w32>;
trn mpyC<w32>;
trn mpyD<w32>;

opn alu_rrr(op: function_code, d1: wrD1, s1: rdS1, s2: rdS2)
{	
    action { 
    stage ID:
	s1;
	s2;
    stage EX:
	switch (op) {
	case add  : pd1w = aluC; ALUC_WRITE = add (aluA=pS1,aluB=pS2,MC=aluM) @alu; 
	case sub  : pd1w = aluC; ALUC_WRITE = sub (aluA=pS1,aluB=pS2,MC=aluM) @alu; 

	case addx : pd1w = aluC; ALUC_WRITE = addx(aluA=pS1,aluB=pS2,aluN=MC,MC=aluM) @alu;
	case subx : pd1w = aluC; ALUC_WRITE = subx(aluA=pS1,aluB=pS2,aluN=MC,MC=aluM) @alu;

	case and  : pd1w = aluC; ALUC_WRITE = band(aluA=pS1,aluB=pS2) @alu;
	case or   : pd1w = aluC; ALUC_WRITE = bor (aluA=pS1,aluB=pS2) @alu;
	case seq  : pd1w = aluC; ALUC_WRITE = seq (aluA=pS1,aluB=pS2) @alu;
	case sge  : pd1w = aluC; ALUC_WRITE = sge (aluA=pS1,aluB=pS2) @alu;
	case sgeu : pd1w = aluC; ALUC_WRITE = sgeu(aluA=pS1,aluB=pS2) @alu;
	case sgt  : pd1w = aluC; ALUC_WRITE = sgt (aluA=pS1,aluB=pS2) @alu;
	case sgtu : pd1w = aluC; ALUC_WRITE = sgtu(aluA=pS1,aluB=pS2) @alu;
	case sle  : pd1w = aluC; ALUC_WRITE = sle (aluA=pS1,aluB=pS2) @alu;
	case sleu : pd1w = aluC; ALUC_WRITE = sleu(aluA=pS1,aluB=pS2) @alu;
	case sll  : pd1w = shC  = sll ( shA=pS1, shB=pS2)  @sh;
	case slt  : pd1w = aluC; ALUC_WRITE = slt (aluA=pS1,aluB=pS2) @alu;
	case sltu : pd1w = aluC; ALUC_WRITE = sltu(aluA=pS1,aluB=pS2) @alu;
	case sne  : pd1w = aluC; ALUC_WRITE = sne (aluA=pS1,aluB=pS2) @alu;
	case sra  : pd1w = shC  = sra ( shA=pS1, shB=pS2)  @sh;
	case srl  : pd1w = shC  = srl ( shA=pS1, shB=pS2)  @sh;
	case xor  : pd1w = aluC; ALUC_WRITE = bxor(aluA=pS1,aluB=pS2) @alu;	
	case xtd  : pd1w = aluC; ALUC_WRITE = xtd (aluA=pS1,aluB=pS2) @alu;	
	}
    stage EX..WB:
	d1;
    }
    syntax : op " " d1 "," s1 "," s2;
    image  : opcode.function::s1::s2::d1::op;
}

opn alu_rr(op: function_code, d1: wrD1, s1: rdS1)
{	
    action { 
    stage ID:
	s1;
    stage EX:
	switch (op) {
	case clb  : pd1w = aluC = clb(aluA=pS1) @alu; 
	}
    stage EX..WB:
	d1;
    }
    syntax : op " " d1 "," s1;
    image  : opcode.function::s1::"xxxxx"::d1::op;
}

opn alu_rrr2(op: function_code, d1: wrE1, s1: rdS1, s2: rdS2)
{	
    action { 
    stage ID:
	s1;
	s2;
    stage EX:
	mpyA=pS1;
	mpyB=pS2;
    stage EX..ME:
	switch (op) {
	case mul : mpyC`ME` = mul (mpyA`EX`,mpyB`EX`) @mpy; 
	}
    stage ME:
	pe1w = mpyC;
    stage ME..WB:
	d1;
    }
    syntax : op " " d1 "," s1 "," s2;
    image  : opcode.function::s1::s2::d1::op;
}

opn alu_lmul(op: function_code, pl: wrPL, ph: wrPH, s1: rdS1, s2: rdS2)
{	
    action { 
    stage ID:
	s1;
	s2;
    stage EX:
	mpyA=pS1;
	mpyB=pS2;
    stage EX..ME:
	switch (op) {
	    case lmulss: lmulss(mpyA`EX`,mpyB`EX`,mpyC`ME`,mpyD`ME`) @mpy; 
	    case lmulsu: lmulsu(mpyA`EX`,mpyB`EX`,mpyC`ME`,mpyD`ME`) @mpy; 
	    case lmuluu: lmuluu(mpyA`EX`,mpyB`EX`,mpyC`ME`,mpyD`ME`) @mpy; 
	}
    stage ME:
	pe1w = mpyC;
	pe2w = mpyD;
    stage ME..WB:
	pl;
	ph;
    }
    syntax : op " " s1 "," s2;
    dummy_syntax : pl ph;
    image  : opcode.function::s1::s2::"xxxxx"::op;
}

opn alu_rri(op: opcode, d1: wrD1, s1: rdS1, i: c16s)
{
    action { 
    stage ID:
	s1;
        pS2 = i;
    stage EX:
	switch (op) {
	case addi: pd1w = aluC = add(aluA=pS1,aluB=pS2,MC=aluM) @alu; 
	case subi: pd1w = aluC = sub(aluA=pS1,aluB=pS2,MC=aluM) @alu; 

	case addix: pd1w =aluC= addx(aluA=pS1,aluB=pS2,aluN=MC,MC=aluM) @alu; 
	case subix: pd1w =aluC= subx(aluA=pS1,aluB=pS2,aluN=MC,MC=aluM) @alu; 

	case seqi: pd1w = aluC = seq(aluA=pS1,aluB=pS2) @alu;
	case sgei: pd1w = aluC = sge(aluA=pS1,aluB=pS2) @alu;
	case sgti: pd1w = aluC = sgt(aluA=pS1,aluB=pS2) @alu;
	case slei: pd1w = aluC = sle(aluA=pS1,aluB=pS2) @alu;
	case slti: pd1w = aluC = slt(aluA=pS1,aluB=pS2) @alu;
	case snei: pd1w = aluC = sne(aluA=pS1,aluB=pS2) @alu;
	}
    stage EX..WB:
	d1;
    }
    syntax : op " " d1 "," s1 ",#" dec i;
    image  : op::s1::d1::i;
}

opn alu_rru(op: opcode, d1: wrD1, s1: rdS1, i: c16u)
{
    action { 
    stage ID:
	s1;
        pS2 = i;
    stage EX:
	switch (op) {
	case addui: pd1w =aluC= add(aluA=pS1,aluB=pS2,MC=aluM) @alu; 
	case subui: pd1w =aluC= sub(aluA=pS1,aluB=pS2,MC=aluM) @alu;

	case adduix: pd1w =aluC= addx(aluA=pS1,aluB=pS2,aluN=MC,MC=aluM) @alu; 
	case subuix: pd1w =aluC= subx(aluA=pS1,aluB=pS2,aluN=MC,MC=aluM) @alu;

	case andi : pd1w = aluC = band(aluA=pS1,aluB=pS2) @alu;
	case ori  : pd1w = aluC = bor (aluA=pS1,aluB=pS2) @alu;
	case sgeui: pd1w = aluC = sgeu(aluA=pS1,aluB=pS2) @alu;
	case sgtui: pd1w = aluC = sgtu(aluA=pS1,aluB=pS2) @alu;
	case sleui: pd1w = aluC = sleu(aluA=pS1,aluB=pS2) @alu;
	case slli : pd1w = shC  = sll ( shA=pS1, shB=pS2)  @sh;
	case sltui: pd1w = aluC = sltu(aluA=pS1,aluB=pS2) @alu;
	case srai : pd1w = shC  = sra ( shA=pS1, shB=pS2)  @sh;
	case srli : pd1w = shC  = srl ( shA=pS1, shB=pS2)  @sh;
	case xori : pd1w = aluC = bxor(aluA=pS1,aluB=pS2) @alu;	
	case xtdi : pd1w = aluC = xtd (aluA=pS1,aluB=pS2) @alu;	
	}
    stage EX..WB:
	d1;
    }
    syntax : op " " d1 "," s1 ",#" dec i;
    image  : op::s1::d1::i;
}

opn alu_lhi(d1: wrD1, i: c16p)
{
    action {
    stage EX:
	pd1w = aluC = lhi(aluU=i) @alu; 
    stage EX..WB:
	d1;
    }
    syntax: "lhi " d1 ", #" dec i;
    image : opcode.lhi::"xxxxx"::d1::i;
}

// pass modes on ALU 

chess_view() { // reg move
    aluC = bor(aluA,aluB=0);
} -> {
    aluC = aluA;
}

chess_view() { // pass c16u constant
    aluC = bor(aluA=R[0],aluB);
} -> {
    aluC = aluB;
}

chess_view() { // pass c16s constant
    aluC = add(aluA=R[0],aluB,aluM);
    } -> {
    aluC = aluB;
}

// primitives for conversion to unsigned char/short 

chess_view() { aluC=band(aluA,aluB=0xff); }   -> { aluC=zero_extend_08(aluA); }
chess_view() { aluC=band(aluA,aluB=0xffff); } -> { aluC=zero_extend_16(aluA); }

chess_view() { aluC=xtd(aluA,aluB=8); }   -> { aluC=sign_extend_08(aluA); }
chess_view() { aluC=xtd(aluA,aluB=16); }  -> { aluC=sign_extend_16(aluA); }

chess_view() { ALUC_WRITE = seq(aluA,aluB=R[0]); } -> { ALUC_WRITE = seq0(aluA); }
chess_view() { ALUC_WRITE = sne(aluA,aluB=R[0]); } -> { ALUC_WRITE = sne0(aluA); }
