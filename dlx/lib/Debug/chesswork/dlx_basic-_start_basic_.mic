
// File generated by mist version Q-2020.03#7e5ed72dc8#200717, Wed Mar 22 14:21:38 2023
// Copyright 2014-2020 Synopsys, Inc. All rights reserved.
// --mist2 dlx_basic-_start_basic_ -I../../. -I../.././isg -r +f +i -s dlx


// m4;   next: m5 (next offset: 20)
000000  4  "00001000"   // (SP,MC) = _pl_rd_res_reg_const_wr_res_reg_1_B1 (8,SP,SP); 
000001  0  "00100001"   // /
000002  0  "00000000"   // /
000003  0  "00001000"   // /
000004  4  "00000000"   // () = vd_nop_ID (); 
000005  0  "00000000"   // /
000006  0  "00000000"   // /
000007  0  "00000000"   // /
000008  4  "00000000"   // () = vd_nop_ID (); 
000009  0  "00000000"   // /
000010  0  "00000000"   // /
000011  0  "00000000"   // /
000012  4  "00000000"   // () = vd_nop_ID (); 
000013  0  "00000000"   // /
000014  0  "00000000"   // /
000015  0  "00000000"   // /
000016  4  "10101000"   // (DMb[-4]) = _pl_rd_res_reg_const_store_1_B1 (R[5],-4,DMb[-4],SP); 
000017  0  "00100101"   // /
000018  0  "11111111"   // /
000019  0  "11111100"   // /

// m5 chess_separator_scheduler;   next: m6 (next offset: 20)

// m6;   next: m7 (next offset: 24)
000020  4  "10101000"   // (DMb[-8]) = _pl_rd_res_reg_const_store_1_B1 (R[4],-8,DMb[-8],SP); 
000021  0  "00100100"   // /
000022  0  "11111111"   // /
000023  0  "11111000"   // /

// m7 chess_separator_scheduler;   next: m8 (next offset: 24)

// m8;   next: m9 (next offset: 40)
000024  4  "01010000"   // (R[4]) = load__pl_rd_res_reg_const_1_B1 (-8,DMb[-8],SP); 
000025  0  "00100100"   // /
000026  0  "11111111"   // /
000027  0  "11111000"   // /
000028  4  "01010000"   // (R[5]) = load__pl_rd_res_reg_const_1_B1 (-4,DMb[-4],SP); 
000029  0  "00100101"   // /
000030  0  "11111111"   // /
000031  0  "11111100"   // /
000032  4  "00101000"   // (LR) = jal_const_1_B1 (0); 
000033  0  "00000000"   // /
000034  0  "00000000"   // /
000035  0  "00000000"   // /
000036  4  "00000000" .swstall "delay_slot"   // () = vd_nop_ID (); 
000037  0  "00000000"   // /
000038  0  "00000000"   // /
000039  0  "00000000"   // /

// m9 subroutine call;   next: m43 (next offset: 40)

// m43;   next: m10 (next offset: 40)

// m10 chess_exit;   next: m44 (next offset: 40)

// m44;   next: m11 (next offset: 40)

// m11 chess_separator_scheduler;   next: m40 (next offset: 40)

// m40;   next: m1 (next offset: 44)
000040  4  "00000000" .swstall "for_chess_exit"   // () = vd_nop_ID (); 
000041  0  "00000000"   // /
000042  0  "00000000"   // /
000043  0  "00000000"   // /

// m1, jump target: m1 (next offset: /)
000044  4  "00100111" .loop_nesting 1    // () = j_const_1_B1 (-4); 
000045  0  "11111111"   // /
000046  0  "11111111"   // /
000047  0  "11111100"   // /
000048  4  "00000000" .swstall "delay_slot"   // () = vd_nop_ID (); 
000049  0  "00000000"   // /
000050  0  "00000000"   // /
000051  0  "00000000"   // /

