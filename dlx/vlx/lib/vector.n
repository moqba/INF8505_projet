
opn vec_instr(vec_mv | vec_neg | vec_sum | vec_bcast | vec_ldst);



mem DMv [0..(dm_size-16),4]<v4w32,addr> alias DMb align(4)  access {
    dmv_ld: dmv_rd `1` = DMv[dm_ad `0`] `1` multicycle_4;
    dmv_st: DMv[dm_ad `0`] `1` = dmv_wr `0`;
};

reg V[4]<v4w32,uint2> read(vr) write(vw vw_ld);
pipe pvS1<v4w32>;

fu vu;
trn vuA<v4w32>;
trn vuB<v4w32>;
trn vuC<w32>;
trn vuD<w32>;

opn vec_mv(w: c2u, r: c2u)
{
    action {
    stage ID:
        pvS1 = vr = V[r];
    stage EX:
        V[w] = vw = pvS1;
    }
    syntax : "vmv v" w ",v" r;
    image  : opcode.function::"xxx"::r::"xxxxx"::"xxx"::w::function_code.vmv;
}

opn vec_neg(w: c2u, r: c2u)
{
    action {
    stage ID:
        pvS1 = vr = V[r];
    stage EX:
        V[w] = vw = vuB = vneg(vuA=pvS1) @vu;
    }
    syntax : "vneg v" w ",v" r;
    image  : opcode.function::"xxx"::r::"xxxxx"::"xxx"::w::function_code.vneg;
}

opn vec_sum(d1: wexR1, r: c2u)
{
    action {
    stage ID:
        pvS1 = vr = V[r];
    stage EX:
        vuC = vsum(vuA=pvS1) @vu;
    stage EX..WB:
        d1 = vuC`EX`;
    }
    syntax : "vsum " d1 ",v" r;
    image  : opcode.function::"xxx"::r::"xxxxx"::d1::function_code.vsum;
}

opn vec_bcast(w: c2u, s1: rexR1)
{
    action {
    stage ID..EX:
        vuD=s1`EX`;
    stage EX:
        vuB = vuD @vu;  // broadcast
        V[w] = vw = vuB;
    }
    syntax : "vbcast v" w ", " s1;
    image  : opcode.function::s1::"xxxxx"::"xxx"::w::function_code.vbcast;
}

trn tv_idx<uint2>;  hw_init tv_idx=0; // V register file write index

opn vec_ldst(op: opcode, s1: rexR1, i: c16s, v: c2u)
{
    action {
    stage ID..EX:
        aguA=s1`EX`;
    stage EX:
        dm_ad = aguC = add(aguA,aguB=i) @agu;
    stage ID..ME:
        switch (op) {
        case lv: stage EX:     tv_idx=v;
                 stage EX..ME: dmv_rd`ME` = DMv[dm_ad`EX`]`ME`;
                 stage ME:     V[v] = vw = dmv_rd;
        case sv: stage ID:     pvS1 = vr = V[v];
                 stage EX..ME: DMv[dm_ad`EX`]`ME` = dmv_wr`EX` = pvS1`EX`;
        }
    }
    syntax : op " v" v "," i "(" s1 ")";
    image  : op::s1::"xxx"::v::i;
}

// transitories for hazard checking

bypass 1 cycles () {
    stage EX: V[#] = #vw;
} -> {
   stage ID: #pvS1 = V[#];
}

trn lv_dpcy<uint1>;        hw_init lv_dpcy = 0;
trn lv_busy<uint1>;        hw_init lv_busy = 0;
trn sv_busy<uint1>;        hw_init sv_busy = 0;
trn lv_idx<uint2>;         hw_init lv_idx = 0;
trn lv_write<uint1>;       hw_init lv_write = 0;
trn lv_write_idx<uint2>;   hw_init lv_write_idx = 0;

hw_stall trn class(hw_stall_lv_dpcy) () { // RAW (dependency) hazard
    trn(lv_dpcy); address_trn(lv_idx);
} -> {
    stage ID: ... = V[#];
}

bypass trn () {
    trn(lv_write); address_trn(lv_write_idx); data_trn(vw_ld);
} -> {
    stage ID: #pvS1 = V[#];
}

hw_stall trn class(hw_stall_lv_out) () {  // WAW (output) hazard
    trn(lv_dpcy); address_trn(lv_idx);
} -> {
    stage EX: V[#] = ...;
}

hw_stall trn class(hw_stall_lv_lv) () {   // lv -> lv sequence
    trn(lv_busy);
} -> {
    stage EX..ME: ... = DMv[dm_ad`EX`]`ME`;
}

hw_stall trn class(hw_stall_lv_sv) () {   // lv -> sv sequence
    trn(lv_busy);
} -> {
    stage EX..ME: DMv[dm_ad`EX`]`ME` = dmv_wr`EX`;
}

hw_stall trn class(hw_stall_sv_lv) () {   // sv -> lv sequence
    trn(sv_busy);
} -> {
    stage EX..ME: ... = DMv[dm_ad`EX`]`ME`;
}

hw_stall trn class(hw_stall_sv_sv) () {   // sv -> sv sequence
    trn(sv_busy);
} -> {
    stage EX..ME: DMv[dm_ad`EX`]`ME` = dmv_wr`EX`;
}

// ld/st vector to ld/st word
hw_stall trn class(hw_stall_lv_lw) () {   // lv -> lw sequence
    trn(lv_busy);
} -> {
    stage EX..ME: ... = DMw[dm_ad`EX`]`ME`;
}

hw_stall trn class(hw_stall_lv_sw) () {   // lv -> sw sequence
    trn(lv_busy);
} -> {
    stage EX..ME: DMw[dm_ad`EX`]`ME` = dmw_wr`EX`;
}

hw_stall trn class(hw_stall_sv_lw) () {   // sv -> lw sequence
    trn(sv_busy);
} -> {
    stage EX..ME: ... = DMw[dm_ad`EX`]`ME`;
}

hw_stall trn class(hw_stall_sv_sw) () {   // sv -> sw sequence
    trn(sv_busy);
} -> {
    stage EX..ME: DMw[dm_ad`EX`]`ME` = dmw_wr`EX`;
}
