/*
-- File : ocd.n
--
-- Contents : nML model for the TLX processor - On Chip Debug interface.
--
-- Copyright (c) 2014-2021 Synopsys, Inc. This Synopsys processor model
-- captures an ASIP Designer Design Technique. The model and all associated
-- documentation are proprietary to Synopsys, Inc. and may only be used
-- pursuant to the terms and conditions of a written license agreement with
-- Synopsys, Inc.  All other use, reproduction, modification, or distribution
-- of the Synopsys processor model or the associated  documentation is
-- strictly prohibited.
*/




reg ocd_addr<addr> read(ocd_addr_r) write(ocd_addr_w);
reg ocd_data<w08>;
reg ocd_instr<iword> read(ocd_instr_r);


trn ocd_req<uint1>;  hw_init ocd_req = 0;
trn ocd_exe<uint1>;  hw_init ocd_exe = 0;

trn ocd_swbreak<uint1>;  hw_init ocd_swbreak = 0;
trn ocd_mod<uint1>;
trn ocd_dis_int<uint1>;  hw_init ocd_dis_int = 0;
properties {
    ocd_address_register        : ocd_addr;
    ocd_data_register           : ocd_data;
    ocd_instruction_register    : ocd_instr;
    ocd_request                 : ocd_req;
    ocd_swbreak                 : ocd_swbreak;
    ocd_execute_instruction     : ocd_exe;
    ocd_mode                    : ocd_mod;
    ocd_disable_interrupt       : ocd_dis_int;
}

trn ocd_ld_DMb<bool>; hw_init ocd_ld_DMb = 0;
trn ocd_st_DMb<bool>; hw_init ocd_st_DMb = 0;

trn ocd_ld_PM<bool>; hw_init ocd_ld_PM = 0;
trn ocd_st_PM<bool>; hw_init ocd_st_PM = 0;

fu ocd_addr_incr;

#if defined(__go__)
opn ocd_if()
{
    action{
     // DMb debug moves
        stage ID..EX:
        guard (ocd_ld_DMb`ID`){
        stage ID:
            ocd_addr = ocd_addr_w = incr1(ocd_addr_r=ocd_addr) @ocd_addr_incr;
        stage ID..EX:
            ocd_data`EX` = dmb_rd = DMb[dm_ad`ID`=ocd_addr_r`ID`]`EX`;
        }
        stage EX:
        guard (ocd_st_DMb){
            ocd_addr = ocd_addr_w = incr1(ocd_addr_r=ocd_addr) @ocd_addr_incr;
            DMb[dm_ad=ocd_addr_r] = dmb_wr = ocd_data;
        }

     // PM debug moves
        stage ID..EX:
        guard (ocd_ld_PM`ID`){
        stage ID:
            ocd_addr = ocd_addr_w = incr1(ocd_addr_r=ocd_addr) @ocd_addr_incr;
        stage ID..EX:
            ocd_instr `EX` = pm_rd = PM[pm_ad`ID`=ocd_addr_r`ID`]`EX`;
        }
        stage EX:
        guard (ocd_st_PM){
            ocd_addr = ocd_addr_w = incr1(ocd_addr_r=ocd_addr) @ocd_addr_incr;
            PM[pm_ad=ocd_addr_r] = pm_wr = ocd_instr_r = ocd_instr;
        }
    }
}
#endif

opn swbrk_instr() {
    action { stage ID: ocd_swbreak = 1; }
    syntax : "swbrk";
    image  : opcode.swbrk::"11111111111111111111111111", cycles(2);
}
