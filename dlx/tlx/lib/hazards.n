/*
-- File : hazards.n
--
-- Contents : nML model for the TLX processor - bypass and stall rules.
--
-- Copyright (c) 2014-2021 Synopsys, Inc. This Synopsys processor model
-- captures an ASIP Designer Design Technique. The model and all associated
-- documentation are proprietary to Synopsys, Inc. and may only be used
-- pursuant to the terms and conditions of a written license agreement with
-- Synopsys, Inc.  All other use, reproduction, modification, or distribution
-- of the Synopsys processor model or the associated  documentation is
-- strictly prohibited.
*/

// Hazards related to end-of-loop checking for zero-overhead loops:

//  A minimum offset is required from a jump instruction to the end-of-loop,
//  such that the jump instruction or any next instruction word still fetched
//  cannot trigger an end-of-loop check before the jump condition is known.
//  The following hazard rules are needed given the tlx PCU, where the
//  end-of-loop check happens based on the address of the instruction in the IF
//  stage, and is disabled (lp_update==0) when a jump signal is set or when no
//  PM fetch is done (issue_sig()==0 ).

//  a jump may not be the end-of-loop instruction, as the end-of-loop check (at
//  IF stage) would then come earlier than the jump action (ID/EX stage).

sw_stall 1..2 instructions class(jump_to_loop_end) () {
    class(jump_id);
} -> {
    special(end_of_loop);
}

sw_stall 1..3 instructions class(jump_to_loop_end) () {
    class(jump_ex);
} -> {
    special(end_of_loop);
}

//  two (nested) hardware loops may not end at the same address
sw_stall 0 instructions class(between_loop_ends) () {
    special(end_of_loop);
} -> {
    special(end_of_loop);
}

//   disallow software breakpoint on end-of-loop instruction
sw_stall 1 instructions () {
    special(pdc_sw_breakpoint);
} -> {
    special(end_of_loop);
}



// ensure loop count registers are witten before end of loop test

sw_stall 1..3 instructions class(zlp_cnt) () { ZC = ...; } -> { special(end_of_loop); }
sw_stall 1..3 instructions class(zlp_stt) () { ZE = ...; } -> { special(end_of_loop); }
sw_stall 1..3 instructions class(zlp_end) () { ZS = ...; } -> { special(end_of_loop); }

// Avoid setting *relative* LS, LE in delay_slots (of jump) because the PC has already changed:
sw_stall 1 cycles () { ZE = ...; } -> { special(delay_slot_end); }
sw_stall 1 cycles () { ZS = ...; } -> { special(delay_slot_end); }






// avoid conflict on dm_address bus

sw_stall 1 cycles class(dm_addr_conflict) () {
    rsrc(dm_ad `EX`);
}
-> {
    rsrc(dm_ad `ID`);
}

// which could be added explicitly in nML as follows:
hw_stall 1 cycles class(read_after_write_R) () {
    stage EX : R$[#] = ...;
}
-> {
    stage ID : r0 = R$[#];
}

#if !defined(__programmers_view__)

// stall if next instruction is dependent on division results

hw_stall trn class(hw_stall_div_dep) ()
    { trn(div_busy); } -> { stage EX: ... = PL; } // quotient
hw_stall trn class(hw_stall_div_dep) ()
    { trn(div_busy); } -> { stage EX: ... = PH; } // remainder

// stall division while previous division is still active

hw_stall trn class(hw_stall_div_busy) ()
    { trn(div_busy); } -> { stage EX: divide(divA, divB, plw, phw); }

// stall instructions that write to result register of division

hw_stall trn class(hw_stall_div_out) ()
    { trn(div_busy); } -> { stage EX: PL = ...; }
hw_stall trn class(hw_stall_div_out) ()
    { trn(div_busy); } -> { stage EX: PH = ...; }

#endif


