
// File generated by checkers version P-2019.09#3993eff943#190321
// Copyright 2014-2019 Synopsys, Inc. All rights reserved.
// checkers -B -v -M -cwork/dlx_sc_dbg/LNa64/dlx_sc_dbg.ccf dlx

// Processor: dlx

#include <tlm.h>
#include <scml2.h>
#include <systemc>

#include "Mdl_dlx_systemc.h"
#include "checkers_sc_time_gater.h"



SC_MODULE(Tlm2Memory)
{
public:
  tlm::tlm_target_socket<8> socket;

public:
  SC_HAS_PROCESS(Tlm2Memory);

  Tlm2Memory(sc_core::sc_module_name name, unsigned mem_size)
    : sc_core::sc_module(name)
    , socket    ("socket")
    , mAdapter  ("mAdapter", socket)
    , mMemory   ("mMemory", mem_size)
  {
    mAdapter(mMemory);
  }

private:
  scml2::tlm2_gp_target_adapter<8>      mAdapter;
  scml2::memory<unsigned char>          mMemory;
};


#define PM_SIZE (1ULL<<20) /* in byte  */
#define DM_SIZE (1ULL<<24) /* in byte */



SC_MODULE(dlx_top_sc)
{
public:
  sc_in_clk                             clock;
  sc_in<bool>                           reset;

  // ------------------------------------------
  // Internal connections
  // ------------------------------------------

  // PM
  Tlm2Memory                            pm;

  // DM
  Tlm2Memory                            dm;

  // time gater (connection to GUI)
  checkers_time_gater                   gclock;
  sc_signal<bool>                       scbreak_req;

  // DLX core
  dlx_sc                                dlx;

  // ------------------------------------------
  // Constructor
  // ------------------------------------------
public:
  SC_CTOR(dlx_top_sc)
    : clock             ("clock"        )
    , reset             ("reset"        )
    , pm                ("pm", PM_SIZE  )
    , dm                ("dm", DM_SIZE  )
    , dlx("DLX")                                // Core
    , gclock("gclock")                          // time gater (connection to GUI)
  {
    // DLX connections
    dlx.clock           (clock          );
    dlx.reset           (reset          );

    dlx.scbreak_req     (scbreak_req    );

    // DLX - PM
    dlx.p_PMb           (pm.socket      );

    // DLX - DM
    dlx.p_DMb           (dm.socket      );

    // time gater (connection to GUI)
    gclock.clock        (clock          );
    gclock.break_req    (scbreak_req    );

  } // c'tor

}; // dlx_top_sc



Tcl_Interp* sc_interp = 0;

int sc_main(int, char*[])
{
  // Top module
  dlx_top_sc dlx_top("dlx_top");

  // signals
  sc_clock                       clock;
  sc_signal<bool>                reset;

  // Connections
  dlx_top.clock                 (clock          );
  dlx_top.reset                 (reset          );

  // Run
  reset = true;
  sc_start(sc_time(100, SC_NS));
  reset = false;
  sc_start();

  return 0;
}

