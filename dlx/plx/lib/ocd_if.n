/*
-- File : ocd.n
--
-- Contents : nML model for the PLX processor - On Chip Debug interface.
--
-- Copyright (c) 2014-2016 Synopsys, Inc. This Synopsys processor model
-- captures an ASIP Designer Design Technique. The model and all associated
-- documentation are proprietary to Synopsys, Inc. and may only be used
-- pursuant to the terms and conditions of a written license agreement with
-- Synopsys, Inc.  All other use, reproduction, modification, or distribution
-- of the Synopsys processor model or the associated  documentation is
-- strictly prohibited.
*/



reg ocd_addr<addr>   read(ocd_addr_r) write(ocd_addr_w);
reg ocd_data<w08>    read(ocd_data_r) write(ocd_data_w);
reg ocd_instr<iword> read(ocd_inst_r);
reg ocd_ctxt<ctxt>   read(ocd_ctxt_r); hw_init ocd_ctxt = 0;

trn ocd_req<uint1>;  hw_init ocd_req = 0;
trn ocd_exe<uint1>;  hw_init ocd_exe = 0;
trn ocd_swbreak<uint1>;  hw_init ocd_swbreak = 0;
trn ocd_pc_valid<uint1>;
trn ocd_pc_value<w32>;
trn ocd_pc_context<ctxt>;
trn ocd_rdy<uint1>;

properties {
    ocd_address_register        : ocd_addr;
    ocd_data_register           : ocd_data;
    ocd_instruction_register    : ocd_instr;
    ocd_context_register        : ocd_ctxt;

    ocd_request                 : ocd_req;
    ocd_execute_instruction     : ocd_exe;
    ocd_swbreak                 : ocd_swbreak;
    ocd_pc_value                : ocd_pc_value;
    ocd_pc_context              : ocd_pc_context;
    ocd_pc_valid                : ocd_pc_valid;
    ocd_ready                   : ocd_rdy;

    exclude_from_additional_register_contexts: ocd_instr, ocd_addr, ocd_data, ocd_ctxt;
}

trn ocd_exe_DM<bool>; hw_init ocd_exe_DM = 0;

trn ocd_ld_DMb<bool>; hw_init ocd_ld_DMb = 0;
trn ocd_st_DMb<bool>; hw_init ocd_st_DMb = 0;
trn ocd_ld_PMb<bool>; hw_init ocd_ld_PMb = 0;
trn ocd_st_PMb<bool>; hw_init ocd_st_PMb = 0;

fu ocd_addr_incr;

#if defined(__go__)

opn ocd_if()
{
    action{
     // DMb debug moves
        stage EX..ME:
        guard (ocd_ld_DMb`EX`){
            ocd_data`ME` = ocd_data_w`ME` = dmb_rd`ME` = DMb[dm_addr`EX`=ocd_addr_r`EX`=ocd_addr`EX`]`ME`;
        }
        guard (ocd_st_DMb`EX`){
            DMb[dm_addr`EX`=ocd_addr_r`EX`=ocd_addr`EX`]`ME` = dmb_wr`EX` = ocd_data_r`EX` = ocd_data`EX`;
        }

     // PM debug moves
        stage ID..EX:
        guard (ocd_ld_PMb`ID`){
        stage ID:
            ocd_addr = ocd_addr_w = incr4(ocd_addr_r=ocd_addr) @ocd_addr_incr;
        stage ID..EX:
            ocd_instr `EX` = pm_rd = PM[pm_addr`ID`=ocd_addr_r`ID`]`EX`;
        }
        stage EX:
        guard (ocd_st_PMb){
            ocd_addr = ocd_addr_w = incr4(ocd_addr_r=ocd_addr) @ocd_addr_incr;
            PM[pm_addr=ocd_addr_r] = pm_wr = ocd_inst_r = ocd_instr;
        }
    }
}

#endif

opn swbrk_instr() {
    action { stage ID: ocd_swbreak = 1; }
    syntax : "swbrk";
    image  : opcode.swbrk::"00000000000000000000000000"
#ifndef __programmers_view__
           , cycles(2)
#endif
           ;
}
