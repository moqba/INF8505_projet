/*
-- File : hazards.n
--
-- Contents : nML model for the PLX processor - bypass and stall rules.
--
-- Copyright (c) 2014-2017 Synopsys, Inc. This Synopsys processor model
-- captures an ASIP Designer Design Technique. The model and all associated
-- documentation are proprietary to Synopsys, Inc. and may only be used
-- pursuant to the terms and conditions of a written license agreement with
-- Synopsys, Inc.  All other use, reproduction, modification, or distribution
-- of the Synopsys processor model or the associated  documentation is
-- strictly prohibited.
*/



sw_stall 0 cycles () { special(chess_hosted); } -> { stage EX: rsrc(dm_addr); }
sw_stall 1..1 cycles <check_at_entry> () { stage EX: rsrc(lnk); } -> { stage ID: rsrc(lnk); }

#ifdef _THREADED

//trick avoid the # character to be interpreted as a preprocessor operator
#define _H_ #

// bypasses for write port w1

#define BYPASS_1_CYCLE_FROM_PD1W_TO(DST)   \
bypass 1 cycles class(bypass_from_EX) () { \
    stage EX: pD1 = _H_ pd1w;              \
    stage ME: pE1 = pe1w = pD1;            \
    stage WB: R$[_H_] = w1 = pE1;          \
} -> {                                     \
    stage ID: DST = R$[_H_];               \
}

BYPASS_1_CYCLE_FROM_PD1W_TO(#pS1=r1)
BYPASS_1_CYCLE_FROM_PD1W_TO(#pS2=r2)

#define BYPASS_2_CYCLES_FROM_PE1W_TO(DST)  \
bypass 2 cycles class(bypass_from_ME) () { \
    stage ME: pE1 = _H_ pe1w;              \
    stage WB: R$[_H_] = w1 = pE1;          \
} -> {                                     \
    stage ID: DST = R$[_H_];               \
}

BYPASS_2_CYCLES_FROM_PE1W_TO(#pS1=r1)
BYPASS_2_CYCLES_FROM_PE1W_TO(#pS2=r2)

#define BYPASS_3_CYCLES_FROM_W1_TO(DST)    \
bypass 3 cycles class(bypass_from_WB) () { \
    stage WB: R$[_H_] = _H_ w1;            \
} -> {                                     \
    stage ID: DST = R$[_H_];               \
}

BYPASS_3_CYCLES_FROM_W1_TO(#pS1=r1)
BYPASS_3_CYCLES_FROM_W1_TO(#pS2=r2)

// bypasses for write port w2

#define BYPASS_1_CYCLE_FROM_PD2W_TO(DST)   \
bypass 1 cycles class(bypass_from_EX) () { \
    stage EX: pD2 = _H_ pd2w;              \
    stage ME: pE2 = pe2w = pD2;            \
    stage WB: R$[_H_] = w2 = pE2;          \
} -> {                                     \
    stage ID: DST = R$[_H_];               \
}

BYPASS_1_CYCLE_FROM_PD2W_TO(#pS1=r1)
BYPASS_1_CYCLE_FROM_PD2W_TO(#pS2=r2)

#define BYPASS_2_CYCLES_FROM_PE2W_TO(DST)  \
bypass 2 cycles class(bypass_from_ME) () { \
    stage ME: pE2 = _H_ pe2w;              \
    stage WB: R$[_H_] = w2 = pE2;          \
} -> {                                     \
    stage ID: DST = R$[_H_];               \
}

BYPASS_2_CYCLES_FROM_PE2W_TO(#pS1=r1)
BYPASS_2_CYCLES_FROM_PE2W_TO(#pS2=r2)

#define BYPASS_3_CYCLES_FROM_W2_TO(DST)    \
bypass 3 cycles class(bypass_from_WB) () { \
    stage WB: R$[_H_] = _H_ w2;            \
} -> {                                     \
    stage ID: DST = R$[_H_];               \
}

BYPASS_3_CYCLES_FROM_W2_TO(#pS1=r1)
BYPASS_3_CYCLES_FROM_W2_TO(#pS2=r2)

// stall when result of multiplication is used in next instruction

hw_stall 1 cycles class(hw_stall_mpy) () {
    stage ME: pE1 = pe1w = mpyC;
    stage WB: R$[#] = w1 = pE1;
} -> {
    stage ID: ... = R$[#];
}

hw_stall 1 cycles class(hw_stall_mpy) () {
    stage ME: pE2 = pe2w = mpyD;
    stage WB: R$[#] = w2 = pE2;
} -> {
    stage ID: ... = R$[#];
}

// stall if next instruction is dependent on division results

hw_stall trn class(hw_stall_div_dep) ()
    { trn(div_busy_raw); } -> { stage ID: ... = PL; } // quotient
hw_stall trn class(hw_stall_div_dep) ()
    { trn(div_busy_raw); } -> { stage ID: ... = PH; } // remainder

// stall division while previous division is still active

hw_stall trn class(hw_stall_div_busy) ()
    { trn(div_busy); } -> { stage EX: divide(divA, divB, wl, wh); }

// stall instructions that write to result register of division

hw_stall trn class(hw_stall_div_out)  ()
    { trn(div_busy_wb); } -> { stage WB: PL = ...; }
hw_stall trn class(hw_stall_div_out)  ()
    { trn(div_busy_wb); } -> { stage WB: PH = ...; }

#endif // _THREADED
