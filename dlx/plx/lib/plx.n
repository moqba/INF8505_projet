/*
-- File : plx.n
--
-- Contents : nML model for the PLX processor.
--
-- Copyright (c) 2014-2016 Synopsys, Inc. This Synopsys processor model
-- captures an ASIP Designer Design Technique. The model and all associated
-- documentation are proprietary to Synopsys, Inc. and may only be used
-- pursuant to the terms and conditions of a written license agreement with
-- Synopsys, Inc.  All other use, reproduction, modification, or distribution
-- of the Synopsys processor model or the associated  documentation is
-- strictly prohibited.
*/



#include "common.h"

#ifdef _THREADED

enum stage_names {PF,   // Pre-fetch
                  IF,   // Instruction Fetch
                  ID,   // Instruction Decode,   read registers
                  EX,   // EXecute
                  ME,   // MEmory
                  WB};  // Write Back registers
#define _pipe pipe

#else

#define PF IF
enum stage_names {dummy0, dummy1, dummy2, dummy3, IF, ID};
#define EX ID
#define ME ID
#define WB ID
#define _pipe trn
// dummies are to point breakpoint_focus_stage with value 5 on single pipeline stage ID

#endif


// memories

#include "memsize.h"

mem PMb[PM_SIZE,1] <w08,addr>;

mem PM[PM_SIZE,4] <iword,addr> alias PMb access {
   ifetch`PF` : pm_rd `IF` = PM[pm_addr`PF`] `IF`;
   istore : PM[pm_addr] = pm_wr;
};

property unconnected : PM; // PMb has property program_memory, but PM is
                           // accessed by PCU

mem DMb [DM_SIZE,1]<w08,addr> access {
    ld_dmb`EX`: dmb_rd `ME` = DMb[dm_addr `EX`] `ME`;
    st_dmb`EX`: DMb[dm_addr `EX`] `ME` = dmb_wr `EX`;
};

mem DMh [DM_SIZE,2]<w16,addr> alias DMb access {
    ld_dmh`EX`: dmh_rd `ME` = DMh[dm_addr `EX`] `ME`;
    st_dmh`EX`: DMh[dm_addr `EX`] `ME` = dmh_wr `EX`;
};

mem DMw [DM_SIZE,4]<w32,addr> alias DMb access {
    ld_dmw`EX`: dmw_rd `ME` = DMw[dm_addr `EX`] `ME`;
    st_dmw`EX`: DMw[dm_addr `EX`] `ME` = dmw_wr `EX`;
};

// subrange used to store static data with efficient 15 bit direct addressing.

mem DMb_stat [2**15,1]<w08,addr> alias DMb[0] access {};
mem DMh_stat [2**15,2]<w16,addr> alias DMb_stat access {};
mem DMw_stat [2**15,4]<w32,addr> alias DMb_stat access {};

property unconnected : DMb_stat, DMh_stat, DMw_stat;

// registers

reg R[16]<w32,uint4> syntax ("R") read(r1     // read port 1
                                       r2)    // read port 2
                                  write(w1    // write port 1
                                       w2);   // write port 2

reg SP <w32> alias R[1]  read(r1) write(w1);  // stack pointer
reg LR <w32> alias R[15] read(r1) write(w1);  // link register

reg PL <w32> alias R[12] read() write(w1 wl);  // low product
reg PH <w32> alias R[13] read() write(w2 wh);  // high product

reg PC <w32> read(pcr_PF pcr_IF pcr_ID pcr_EX pcr_ME) write(pcw_IF pcw_ID pcw_EX pcw_ME);  // program counter

reg MC <uint1>;                               // MSB/Carry bit

reg EN <state> read(en_r) write(en_w);              // activity of threads
hw_init EN = 1;                                     // first context emulates host
reg TK <uint1> read(tk_r) write(tk_w);              // token for mutual exclusion
hw_init TK = 0;

reg ACK <uint1> write(ack_w);                       // DM access success latch

reg AP<uint3> read(ap_r); hw_init AP = 0; // schedule same thread with (AP+1) cycles difference

properties { exclude_from_additional_register_contexts: EN, TK, ACK, AP; }


reg SR <status> { AP; ACK; MC; TK; EN; };                     // grouped on OCD

// host interface
reg host_CMD<uint1> read(cmd_r) write(cmd_w); hw_init host_CMD = 0;
reg host_CTX<ctxt>  read(ctx_r) write(ctx_w);
reg host_PC<w32>    read(pch_r) write(pch_w);
reg host_SP<w32>    read(sph_r) write(sph_w);
properties { exclude_from_additional_register_contexts: host_SP, host_PC, host_CTX, host_CMD; }


#ifdef _THREADED
trn context_IF<ctxt>; hw_init context_IF = 0;
def add_c = actual_CSIZE-1;
properties {
    additional_register_contexts: add_c;
    context_issue_trn: context_IF;
}
#endif

outport ctx_id<ctxt>;
outport lrsc_ena<uint1>; hw_init lrsc_ena=0; trn trn_lrsc_ena<uint1>;
inport  lrsc_ack<uint1>;
inport  suspend<state>;
inport  dm_ack<uint1>;
inport  dm_wait<uint1>;

// pipeline registers

_pipe pS1 <w32>;       // source 1 (ID->EX)
_pipe pS2 <w32>;       // source 2 (ID->EX)
_pipe pD1 <w32>;       // destination 1 (EX->ME)
_pipe pE1 <w32>;       // destination 1 (ME->WR)

_pipe pD2 <w32>;       // destination 2 (EX->ME)
_pipe pE2 <w32>;       // destination 2 (ME->WR)

trn pd1w<w32>;        // input of pD1, is used in bypass rules
trn pe1w<w32>;        // input of pE1, is used in bypass rules

trn pd2w<w32>;        // input of pD2, is used in bypass rules
trn pe2w<w32>;        // input of pE2, is used in bypass rules

// constants

cst c4u   <uint4>;
cst c5s   <int5>;
cst c5u   <uint5>;
cst c16s  <int16>;
cst c16u  <uint16>;
cst c16p  <int16p>;
cst c26s  <int26>;


// properties

properties {
    program_counter : PC;
    program_memory  : PMb;
    endianness      : big;
    decode_stage    : ID;
    unconnected     : SP;
    chess_pc_offset : instructions;
}

// start of instruction set grammar

start plx;

opn plx (alu_instr |
         load_store_instr |
         control_instr |
         div_instr);

#if defined(__go__)
opn always (ocd: ocd_if) { action { ocd; } }
#endif

#include "opcode.n"
#include "regfile.n"
#include "alu.n"
#include "ldst.n"
#include "control.n"
#include "div.n"
#include "mutex.n"
#include "ocd_if.n"
#include "hazards.n"
