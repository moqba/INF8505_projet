/*
-- File : control.n
--
-- Contents : nML model for the PLX processor -- control instructions.
--
-- Copyright (c) 2014-2016 Synopsys, Inc. This Synopsys processor model
-- captures an ASIP Designer Design Technique. The model and all associated
-- documentation are proprietary to Synopsys, Inc. and may only be used
-- pursuant to the terms and conditions of a written license agreement with
-- Synopsys, Inc.  All other use, reproduction, modification, or distribution
-- of the Synopsys processor model or the associated  documentation is
-- strictly prohibited.
*/



opn control_instr(br_instr | j_instr | jal_instr | jalr_instr | jr_instr |
                  nop_instr | swbrk_instr |
                  jti_instr | rti_instr | tk_test_and_set | tk_clear);

// Jump pipeline for j and jal
//
// i   : j    : IF  ID  EX  ME  WB
// i+1 : ds1  :     IF  ID  EX  ME  WB
// i+2 : t1   :         IF  ID  EX  ME  WB

// Jump pipeline for jalr, jar, beqz-taken and bnez-taken
// Branch not taken pipeline: beqz-not-taken and bnez-not-taken
//
// i   : beqz : IF  ID  EX  ME  WB
// i+1 : ds1  :     IF  ID  EX  ME  WB
// i+2 : ds2  :         IF  ID  EX  ME  WB
// i+3 : n1   :             IF  ID  EX  ME  WB

trn cnd<bool>;
trn of16<int16>;
trn of26<int26>;
trn trgt<w32>;
trn lnk<w32>;
trn j_EX<uint1>; hw_init j_EX = 0;
trn j_ID<uint1>; hw_init j_ID = 0;

fu eq;   // test beqz or bnez
trn eqA<w32>;

trn pc_incremented<w32>; hw_init pc_incremented = 0;


opn br_instr(op: opcode, a: rdS1, i: c16s)
{
    action {
    stage ID:
        a;
        j_EX = 1;
    stage EX:
        switch (op) {
        case beqz: cnd = eqz(eqA=pS1) @eq;
        case bnez: cnd = nez(eqA=pS1) @eq;
        }
        br(cnd,of16=i);
    }
    syntax : op " " a ",#" dec i;
    image  : op::a::"00000"::i;
}

opn j_instr(i: c26s)
{
    action {
    stage ID:
        j_ID = 1;
        j(of26=i);
    }
    syntax : "j #" dec i;
    image  : opcode.j::i;
}

opn jal_instr(lr: wrS1LR, i: c26s)
{
    action {
    stage ID:
        j_ID = 1;
        of26 = i;
#if defined(__programmers_view__)
        lnk = jal(of26);
#else
        lnk = pc_incremented;
        jal(of26);
#endif
    stage ID..WB:
        lr;
    }
    syntax : "jal #" dec i;
    dummy_syntax : lr;
    image  : opcode.jal::i;
}

opn jalr_instr(lr: wrLR, b: rdS2)
{
    action {
    stage ID:
        b;
        j_EX = 1;
    stage EX:
       trgt = pS2;
#if defined(__programmers_view__)
        lnk = jalr(trgt);
#else
        lnk = pc_incremented;
        jalr(trgt);
#endif
    stage EX..WB:
        lr;
    }
    syntax : "jalr " b;
    dummy_syntax : lr;
    image  : opcode.jalr::b::"00000"::"0000000000000000";
}

opn jr_instr(a: rdS1)
{
    action {
    stage ID:
        a;
        j_EX = 1;
    stage EX:
        jr(trgt=pS1);
    }
    syntax : "jr " a;
    image  : opcode.jr::a::"00000"::"0000000000000000";
}

opn nop_instr()
{
    action { stage ID: nop(); }
    syntax : "nop";
    image  : opcode.function::"00000"::"00000"::"00000"::function_code.nop;
}

trn en_i<ctxt>;
trn en_c<uint1>;

opn jti_instr(sp: wrSP) {
    action {
        stage ID: j_EX = 1;
        stage EX: host_CMD = cmd_w = 0;
                  jti(trgt = pch_r = host_PC);
                  EN = en_w = set_bit(en_r = EN, en_i = ctx_r = host_CTX, en_c = 1);
        stage ME: pe1w = sph_r = host_SP;
        stage ME..WB: sp;
    }
    image: opcode.jti::"00000000000000000000000000", pdg_encoding();
}

opn rti_instr()
{
    action { stage EX:
        rti();
#if defined(_THREADED) && !defined(__programmers_view__)
        EN = en_w = set_bit(en_r = EN, en_i = context_id_EX, en_c = 0);
#endif
    }
    syntax: "rti";
    image  : opcode.rti::"00000000000000000000000000";
}
