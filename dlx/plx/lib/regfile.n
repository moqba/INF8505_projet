/*
-- File : regfile.n
--
-- Contents : nML model for the PLX processor -- main register file access.
--
-- Copyright (c) 2014-2016 Synopsys, Inc. This Synopsys processor model
-- captures an ASIP Designer Design Technique. The model and all associated
-- documentation are proprietary to Synopsys, Inc. and may only be used
-- pursuant to the terms and conditions of a written license agreement with
-- Synopsys, Inc.  All other use, reproduction, modification, or distribution
-- of the Synopsys processor model or the associated  documentation is
-- strictly prohibited.
*/




mode mR1(r: c4u) { value: R[r] read(r1) write(w1); syntax: "r" dec r; image: r; }
mode mR2(r: c4u) { value: R[r] read(r2) write(w2); syntax: "r" dec r; image: r; }

mode mSR()  { value: SR;                                syntax: "sr"; }
mode mSPH() { value: host_SP  read(sph_r) write(sph_w); syntax: "host_SP"; }
mode mPCH() { value: host_PC  read(pch_r) write(pch_w); syntax: "host_PC"; }
mode mCMD() { value: host_CMD read(cmd_r) write(cmd_w); syntax: "host_CMD"; }
mode mCTX() { value: host_CTX read(ctx_r) write(ctx_w); syntax: "host_CTX"; }

mode mW(mSR|mCMD|mCTX|mSPH|mPCH) make_exclusive;
mode mS1(mR1 | mW) make_exclusive;
mode mS2(mR2 | mW) make_exclusive;


opn rdS1(r: mS1) {
    action: stage ID: pS1 = r;
    syntax: r;
    image: r;
}

opn rdS2(r: mS2) {
    action: stage ID: pS2 = r;
    syntax: r;
    image: r;
}

opn wrD1(r: mS1) {
    action {
    stage EX: pD1 = pd1w;
    stage ME: pE1 = pe1w = pD1;
    stage ID..WB: r`WB` = w1`WB` = pE1`WB`;
    }
    syntax: r;
    image: r;
}

opn wrE1(r: mS1) {
    action {
    stage ME: pE1 = pe1w;
    stage ID..WB: r`WB` = w1`WB` = pE1`WB`;
    }
    syntax: r;
    image: r;
}

opn wrD2(r: mS2) {
    action {
    stage EX: pD2 = pd2w;
    stage ME: pE2 = pe2w = pD2;
    stage ID..WB: r`WB` = w2`WB` = pE2`WB`;
    }
    syntax: r;
    image: r;
}

// single field write operations

opn wrS1LR() {
    action {
    stage ID: pS1 = lnk;
    stage EX: pD1 = pd1w = pS1;
    stage ME: pE1 = pe1w = pD1;
    stage WB: LR = w1 = pE1;
    }
    syntax: "r15";
    image: "";
}

opn wrLR() {
    action {
    stage EX: pD1 = pd1w = lnk;
    stage ME: pE1 = pe1w = pD1;
    stage WB: LR = w1 = pE1;
    }
    syntax: "r15";
    image: "";
}

opn wrPL() {
    action {
    stage ME: pE1 = pe1w;
    stage WB: PL = w1 = pE1;
    }
}

opn wrPH() {
    action {
    stage ME: pE2 = pe2w;
    stage WB: PH = w2 = pE2;
    }
}

opn wrSP() {
    action {
    stage ME: pE1 = pe1w;
    stage WB: SP = w1 = pE1;
    }
}

chess_view() { pS1 = SR; } -> { pS1 = get_sr_cv(); }

// Reading R0 yields 0.

chess_view() { r1 = R[0]; } -> { r1 = 0; }
chess_view() { r2 = R[0]; } -> { r2 = 0; }

hw_init R = others => 0;
