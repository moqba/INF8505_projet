==============================================================================
REAMDE for the PLX example processor model.

Date: June 30 2017

Copyright (c) 2017 Synopsys, Inc. This processor model and the associated
documentation are proprietary to Synopsys, Inc.  This model may only be
used in accordance with the terms and conditions of a written license
agreement with Synopsys, Inc.  All other use, reproduction, or distribution
of this model are strictly prohibited.
==============================================================================

Variant PLX is a derivative of example core ILX

ILX:

interleaved multi-threading
latency is 4
round robin scheduling

example mutex features
- test_and_set inside core
- load reserve and store conditional inside TB

PLX compared to ILX:

Increased threads from 4 to 8

Added flow control on DM
- TB:
  . mimic bus contention: ack signal
  . mimic cache miss timing: suspend signal
- Core:
  . blocking access in debug mode
  . non-blocking access in run mode:
      ack -> retry
      suspend -> thread not scheduled
  . further
      ack is latched in status (for watchpoints)
      sw_stall rule between special(chess_hosted) and ld/st

Added protection on pipeline
- Moved jumps back to as early as possible (was relaxed in ILX to all in stage EX
- restored the DLX data bypasses
- DLX data stalls and control hazards are dealt with at run time in PCU


==============================================================================

build model
-----------

// generate ASIP model, software libraries, both ISSs (_ca and _st), RTL, and debug client

script 'make_plx_model'


basic OCD testplan
------------------

./make_plx_model
cd debug_client/tests
make clean

# batch run
make tests RDC=OCD_VCS -j 8
# run-debug configuration OCD_VCS spawns VCS in background
# multiple tests can be run in parallel

# interactive run
setenv JTS_PORT_NUMBER 41003
../../hdl/plx_vlog/simv -gui &
make 01 JTS_PORT_NUMBER=41003
# port default is 41001


individual test run
-------------------

./make_plx_model
cd regression/C00_simple_call

# batch run
make -f ../Makefile.test run                # default is plx_ca
make -f ../Makefile.test run ISS=plx_st
make -f ../Makefile.test run RDC=OCD_VCS
make -f ../Makefile.test run RDC=OCD_VCS HDL=vhdl
make -f ../Makefile.test run RDC=OCD_VCS STEP=+1
make -f ../Makefile.test run RDC=OCD_VCS TMO=0
make -f ../Makefile.test run RDC=OCD_VCS GAP=2

# interactive run
setenv JTS_PORT_NUMBER 41007
../../hdl/plx_vlog/simv -gui &
make -f ../Makefile.test run RDC=OCD_VCS SIMV=NONE JTS_PORT_NUMBER=41007
# port default is 41001


testplan run
------------

./make_plx_model
cd regression
setenv NCORES_HOST 8
domake "diff RDC=OCD_VCS STEP=+1" C9*  # e.g.


reference synthesis
-------------------

echo "" >! lib/iss_defines.h
cd hdl
chessmk -m plx_vlog.prx
setenv ASIP_SETUP `pwd`/asip_setup
setenv ASIP_LIB_SETUP /slowfs/de02asip02/sgasip/syn_libs/ts28nmhsdst
make -C plx_vlog/syn_dc

note: 79Kgates @ 700MHz

